@{
    ViewData["Title"] = "Booking Duration Breakdown";
}

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                <div>
                    <div class="d-flex align-items-center gap-3 mb-2">
                        <a href="@Url.Action("Index", "Home")" class="btn btn-outline-secondary btn-sm">
                            <i class="bi bi-arrow-left me-1"></i>Back
                        </a>
                        <h1 class="h2 mb-0 fw-bold text-warning">
                            <i class="bi bi-hourglass-split me-2"></i>Booking Duration Breakdown
                        </h1>
                    </div>
                    <p class="text-muted mb-0">See which booking durations are most popular. Analyze by sport, city, rink size, and facility.</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary shadow-sm" onclick="exportData()">
                        <i class="bi bi-download me-2"></i>Export
                    </button>
                    <button class="btn btn-primary shadow-sm" onclick="loadData()">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom-0">
                    <h5 class="card-title mb-0 text-secondary">
                        <i class="bi bi-funnel me-2"></i>Filters
                    </h5>
                </div>
                <div class="card-body pb-2">
                    <div class="row g-3 mb-3">
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Sport</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="sportsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="sportsDropdownLabel">All Sports</span>
                                </button>
                                <ul class="dropdown-menu w-100 p-2" aria-labelledby="sportsDropdown" style="max-height: 300px; overflow-y: auto; z-index: 1051;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'sportsOptions',type:'sports',labelId:'sportsDropdownLabel',defaultLabel:'All Sports'})">
                                    <div id="sportsOptions"></div>
                                </ul>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">City</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="citiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="citiesDropdownLabel">All Cities</span>
                                </button>
                                <ul class="dropdown-menu w-100 p-2" aria-labelledby="citiesDropdown" style="max-height: 300px; overflow-y: auto; z-index: 1051;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'citiesOptions',type:'cities',labelId:'citiesDropdownLabel',defaultLabel:'All Cities'})">
                                    <div id="citiesOptions"></div>
                                </ul>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Rink Size</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="rinkSizesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="rinkSizesDropdownLabel">All Sizes</span>
                                </button>
                                <ul class="dropdown-menu w-100 p-2" aria-labelledby="rinkSizesDropdown" style="max-height: 300px; overflow-y: auto; z-index: 1051;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'rinkSizesOptions',type:'rinkSizes',labelId:'rinkSizesDropdownLabel',defaultLabel:'All Sizes'})">
                                    <div id="rinkSizesOptions"></div>
                                </ul>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Facility</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="facilitiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="facilitiesDropdownLabel">All Facilities</span>
                                </button>
                                <ul class="dropdown-menu w-100 p-2" aria-labelledby="facilitiesDropdown" style="max-height: 300px; overflow-y: auto; z-index: 1051;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'facilitiesOptions',type:'facilities',labelId:'facilitiesDropdownLabel',defaultLabel:'All Facilities'})">
                                    <div id="facilitiesOptions"></div>
                                </ul>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Created Date (From)</label>
                            <input type="date" class="form-control" id="createdDateFrom">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Created Date (To)</label>
                            <input type="date" class="form-control" id="createdDateTo">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Happening Date (From)</label>
                            <input type="date" class="form-control" id="happeningDateFrom">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Happening Date (To)</label>
                            <input type="date" class="form-control" id="happeningDateTo">
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-12">
                            <button class="btn btn-primary px-4 shadow-sm" onclick="applyFilters()">
                                <i class="bi bi-funnel me-2"></i>Apply Filters
                            </button>
                            <button class="btn btn-outline-secondary px-4 shadow-sm" onclick="clearFilters()">
                                <i class="bi bi-x-circle me-2"></i>Clear Filters
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-lg">
                <div class="card-header bg-white border-bottom-0">
                    <h5 class="card-title mb-0 text-warning">
                        <i class="bi bi-hourglass-split me-2"></i>Booking Duration Breakdown Results
                    </h5>
                </div>
                <div class="card-body">
                    <div id="loadingSpinner" class="text-center d-none py-5">
                        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3 text-primary">Loading data...</p>
                    </div>
                    <div id="errorMessage" class="alert alert-danger d-none" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <span id="errorText">An error occurred while loading data.</span>
                    </div>
                    <div id="dataContainer" class="d-none">
                        <!-- Summary Cards -->
                        <div class="row mb-4 g-3">
                            <div class="col-md-4">
                                <div class="card bg-gradient-success text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-clipboard-data display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="totalBookings">0</h2>
                                        <p class="mb-0">Total Bookings</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card bg-gradient-primary text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-hourglass display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="avgDuration">0</h2>
                                        <p class="mb-0">Average Duration (Hours)</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card bg-gradient-warning text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-hourglass-split display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="mostPopular">-</h2>
                                        <p class="mb-0">Most Popular Duration</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Charts -->
                        <div class="row mb-4 g-3">
                            <div class="col-md-6">
                                <div class="card border-0 bg-gradient-primary text-white shadow-sm h-100">
                                    <div class="card-body">
                                        <h6 class="fw-bold mb-3"><i class="bi bi-pie-chart me-2"></i>Pie Chart</h6>
                                        <div class="chart-container" style="height: 400px;">
                                            <canvas id="pieChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card border-0 bg-gradient-warning text-white shadow-sm h-100">
                                    <div class="card-body">
                                        <h6 class="fw-bold mb-3"><i class="bi bi-bar-chart me-2"></i>Bar Chart</h6>
                                        <div class="chart-container" style="height: 400px;">
                                            <canvas id="barChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Data Table -->
                        <div class="table-responsive mb-3">
                            <table class="table table-hover align-middle rounded shadow-sm">
                                <thead class="table-light">
                                    <tr>
                                        <th>Duration (Hours)</th>
                                        <th>Bookings Count</th>
                                        <th>Percentage</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody id="dataTableBody">
                                    <!-- Data will be populated here -->
                                </tbody>
                            </table>
                        </div>
                        <!-- Query History Table -->
                        <div class="table-responsive mb-3">
                            <h6 class="fw-bold mt-4 mb-2">
                                <i class="bi bi-clock-history me-2"></i>Query History
                                <button class="btn btn-sm btn-outline-danger ms-2" onclick="clearHistory()" title="Clear History">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </h6>
                            <table class="table table-sm table-bordered align-middle" id="historyTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Date/Time</th>
                                        <th>Filters</th>
                                        <th>Most Popular Duration</th>
                                        <th>Avg Duration (hrs)</th>
                                        <th>Total Bookings</th>
                                    </tr>
                                </thead>
                                <tbody id="historyTableBody">
                                    <!-- History rows go here -->
                                </tbody>
                            </table>
                        </div>
                        <!-- Last Updated -->
                        <div class="mt-3 text-muted small">
                            Last updated: <span id="lastUpdated">Never</span>
                        </div>

                        <!-- Legend -->
                        <div class="mt-3">
                            <small class="text-muted">
                                <strong>Legend:</strong>
                                <span class="text-success">Short</span> (≤1h),
                                <span class="text-warning">Medium</span> (1-2h),
                                <span class="text-danger">Long</span> (>2h)
                            </small>
                        </div>

                        <!-- Historial de Consultas -->
                        <div class="mt-4">
                            <h6 class="fw-bold mb-2"><i class="bi bi-clock-history me-2"></i>Historial de Consultas</h6>
                            <div class="table-responsive">
                                <table class="table table-bordered table-sm">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Filters <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Resumen de los filtros aplicados para esta consulta."></i></th>
                                            <th>Most Popular Duration <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Duración más frecuente en las reservas filtradas."></i></th>
                                            <th>Average Duration (Hours) <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Promedio de duración de las reservas."></i></th>
                                            <th>Total Bookings <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Cantidad total de reservas que cumplen los filtros."></i></th>
                                        </tr>
                                    </thead>
                                    <tbody id="historyTable">
                                        <!-- Data will be populated here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="d-flex justify-content-between align-items-center mt-3 small">
                            <div>
                                <span class="text-muted">API Endpoint: <code>/api/Stats/GetBookingDurationBreakdown</code></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentData = null;
        let pieChart = null;
        let barChart = null;
        let queryHistory = [];
        let filtersReady = false;
        
        // Función para inicializar la vista
        async function initializeView() {
            try {
                ConfigHelpers.log('Iniciando vista GetBookingDurationBreakdown...');
                
                // Verificar que SharedFilters esté disponible
                if (typeof initializeSharedFilters !== 'function') {
                    ConfigHelpers.logError('SharedFilters not available - initializeSharedFilters function not found');
                    console.error('Available global functions:', Object.keys(window).filter(key => typeof window[key] === 'function'));
                    return;
                }
                
                ConfigHelpers.log('initializeSharedFilters function found, calling it...');
                
                // Inicializar filtros compartidos
                await initializeSharedFilters();
                filtersReady = true;
                ConfigHelpers.log('Filtros inicializados correctamente');
                
                // Cargar datos iniciales
                await loadDataWithoutFilters();
                
            } catch (error) {
                ConfigHelpers.logError('Error inicializando vista:', error);
                showError('Error inicializando la vista: ' + error.message);
            }
        }
        
        // Cargar datos sin filtros (carga inicial rápida)
        async function loadDataWithoutFilters() {
            try {
                showLoading();
                hideError();
                
                // Usar las utilidades de API optimizadas
                const data = await API_UTILS.loadStatsData('bookingDurationBreakdown');
                displayData(data, 'Carga inicial sin filtros');
                
            } catch (error) {
                ConfigHelpers.logError('Error cargando datos iniciales:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadDataWithoutFilters');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }
        
        // Inicializar cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', initializeView);
        
        // También inicializar si el DOM ya está listo (para navegación SPA)
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeView);
        } else {
            initializeView();
        }

        // Agregar listener para cambios de filtros (recarga automática)
        document.addEventListener('DOMContentLoaded', function() {
            // Escuchar cambios en los filtros de fecha
            const dateInputs = ['createdDateFrom', 'createdDateTo', 'happeningDateFrom', 'happeningDateTo'];
            dateInputs.forEach(inputId => {
                const element = document.getElementById(inputId);
                if (element) {
                    element.addEventListener('change', () => {
                        console.log(`📅 Date filter changed: ${inputId}`);
                        loadData();
                    });
                }
            });
        });

        // Cargar datos desde la API usando los filtros globales
        async function loadData() {
            console.log('🔄 loadData() called');
            
            if (!filtersReady) {
                ConfigHelpers.log('loadData() abortado: filtros no listos');
                return;
            }
            
            try {
                showLoading();
                hideError();
                
                console.log('🔍 Calling buildApiParameters()...');
                const params = buildApiParameters();
                console.log('📤 buildApiParameters() returned:', params);
                
                // Usar las utilidades de API optimizadas
                const data = await API_UTILS.loadStatsData('bookingDurationBreakdown', params);
                displayData(data, 'Datos con filtros aplicados');
                
            } catch (error) {
                ConfigHelpers.logError('Error cargando datos:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadData');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }

        // Hacer loadData disponible globalmente
        window.loadData = loadData;

        // Botón para aplicar filtros (solo recarga datos)
        function applyFilters() {
            console.log('🔘 Apply Filters button clicked');
            ConfigHelpers.log('Aplicando filtros...');
            loadData();
        }

        // Botón para limpiar filtros globales y recargar datos
        function clearFilters() {
            ConfigHelpers.log('Limpiando filtros...');
            clearAllFilters();
            loadData();
        }

        // Build API parameters from shared filters
        function buildApiParameters() {
            const params = new URLSearchParams();
            
            // Get values from shared filters
            const sports = getSelectedDropdownValues('sportsOptions');
            const cities = getSelectedDropdownValues('citiesOptions');
            const rinkSizes = getSelectedDropdownValues('rinkSizesOptions');
            const facilities = getSelectedDropdownValues('facilitiesOptions');
            
            // Get additional filters
            const createdDateFrom = document.getElementById('createdDateFrom').value;
            const createdDateTo = document.getElementById('createdDateTo').value;
            const happeningDateFrom = document.getElementById('happeningDateFrom').value;
            const happeningDateTo = document.getElementById('happeningDateTo').value;
            
            console.log('🔍 Building API parameters:', {
                sports, cities, rinkSizes, facilities,
                createdDateFrom, createdDateTo, happeningDateFrom, happeningDateTo
            });
            
            // Add parameters (using new List<string> format)
            if (sports.length) sports.forEach(sport => params.append('sports', sport));
            if (cities.length) cities.forEach(city => params.append('cities', city));
            if (rinkSizes.length) rinkSizes.forEach(size => params.append('rinkSizes', size));
            if (facilities.length) facilities.forEach(facility => params.append('facilities', facility));
            if (createdDateFrom) params.append('createdDateFrom', createdDateFrom);
            if (createdDateTo) params.append('createdDateTo', createdDateTo);
            if (happeningDateFrom) params.append('happeningDateFrom', happeningDateFrom);
            if (happeningDateTo) params.append('happeningDateTo', happeningDateTo);
            
            console.log('📤 Final API parameters:', params.toString());
            return params;
        }

        // Mostrar datos en la UI
        function displayData(data, source = '') {
            currentData = data;
            ConfigHelpers.log(`Mostrando datos (${source}):`, data);

            // Permitir tanto {data: {...}} como {...} plano
            let dataObj = data && data.data ? data.data : data;
            if (!dataObj || Object.keys(dataObj).length === 0) {
                showError('No data available');
                return;
            }

            const labels = Object.keys(dataObj);
            const values = Object.values(dataObj);
            const totalBookings = data.totalBookings || values.reduce((sum, val) => sum + val, 0);

            // Find most popular start time
            let maxIndex = 0;
            values.forEach((value, index) => {
                if (value > values[maxIndex]) maxIndex = index;
            });

            const mostPopular = labels[maxIndex];
            const mostPopularPct = ((values[maxIndex] / totalBookings) * 100).toFixed(1);

            // Update summary cards
            document.getElementById('totalBookings').textContent = totalBookings.toLocaleString();
            document.getElementById('avgDuration').textContent = '-';
            document.getElementById('mostPopular').textContent = `${mostPopular} (${mostPopularPct}%)`;

            // Update data table
            const tbody = document.getElementById('dataTableBody');
            tbody.innerHTML = '';

            labels.forEach((label, index) => {
                const percentage = ((values[index] / totalBookings) * 100).toFixed(1);
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${label}</td>
                    <td>${values[index].toLocaleString()}</td>
                    <td>${percentage}%</td>
                `;
                tbody.appendChild(row);
            });

            // Create charts
            createPieChart(labels, values);
            createBarChart(labels, values);

            addToHistory(getFiltersSummary(), mostPopular, mostPopularPct, '-', totalBookings);

            document.getElementById('dataContainer').classList.remove('d-none');
            updateLastUpdated();
        }

        // Create pie chart
        function createPieChart(labels, values) {
            const ctx = document.getElementById('pieChart');
            if (!ctx) return;
            
            if (pieChart) {
                pieChart.destroy();
            }
            // Paleta profesional de 10 colores accesibles
            const colors = [
                '#2563eb', // blue-600
                '#10b981', // emerald-500
                '#f59e42', // orange-400
                '#f43f5e', // rose-500
                '#6366f1', // indigo-500
                '#fbbf24', // amber-400
                '#14b8a6', // teal-500
                '#a21caf', // purple-700
                '#eab308', // yellow-500
                '#0ea5e9'  // sky-500
            ];
            
            pieChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels.map(label => `${label} hours`),
                    datasets: [{
                        data: values,
                        backgroundColor: labels.map((_, i) => colors[i % colors.length]),
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((context.parsed / total) * 100).toFixed(1);
                                    return `${context.label}: ${context.parsed} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Create bar chart
        function createBarChart(labels, values) {
            const ctx = document.getElementById('barChart');
            if (!ctx) return;
            
            if (barChart) {
                barChart.destroy();
            }
            // Color principal con opacidad
            const mainColor = 'rgba(37, 99, 235, 0.85)'; // blue-600
            barChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels.map(label => `${label} hours`),
                    datasets: [{
                        label: 'Bookings',
                        data: values,
                        backgroundColor: mainColor,
                        borderColor: '#2563eb',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Number of Bookings'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Duration (Hours)'
                            }
                        }
                    }
                }
            });
        }

        // Get duration status
        function getDurationStatus(hours) {
            if (hours <= 1) return 'Short';
            if (hours <= 3) return 'Medium';
            return 'Long';
        }
        
        function showLoading() {
            document.getElementById('loadingSpinner').classList.remove('d-none');
            document.getElementById('dataContainer').classList.add('d-none');
            document.getElementById('errorMessage').classList.add('d-none');
        }
        
        function hideLoading() {
            document.getElementById('loadingSpinner').classList.add('d-none');
        }
        
        function showError(message) {
            document.getElementById('errorText').textContent = message;
            document.getElementById('errorMessage').classList.remove('d-none');
            document.getElementById('dataContainer').classList.add('d-none');
        }
        
        function hideError() {
            document.getElementById('errorMessage').classList.add('d-none');
        }

        // Update last updated timestamp
        function updateLastUpdated() {
            const lastUpdatedElement = document.getElementById('lastUpdated');
            if (lastUpdatedElement) {
                lastUpdatedElement.textContent = new Date().toLocaleString();
            }
        }

        // Get filters summary for history
        function getFiltersSummary() {
            const sports = getSelectedDropdownValues('sportsOptions');
            const cities = getSelectedDropdownValues('citiesOptions');
            const rinkSizes = getSelectedDropdownValues('rinkSizesOptions');
            const facilities = getSelectedDropdownValues('facilitiesOptions');
            const createdDateFrom = document.getElementById('createdDateFrom').value;
            const createdDateTo = document.getElementById('createdDateTo').value;
            const happeningDateFrom = document.getElementById('happeningDateFrom').value;
            const happeningDateTo = document.getElementById('happeningDateTo').value;
            
            const parts = [];
            if (sports.length) parts.push(`Sports: ${sports.join(', ')}`);
            if (cities.length) parts.push(`Cities: ${cities.join(', ')}`);
            if (rinkSizes.length) parts.push(`Sizes: ${rinkSizes.join(', ')}`);
            if (facilities.length) parts.push(`Facilities: ${facilities.join(', ')}`);
            if (createdDateFrom) parts.push(`Created From: ${createdDateFrom}`);
            if (createdDateTo) parts.push(`Created To: ${createdDateTo}`);
            if (happeningDateFrom) parts.push(`Happening From: ${happeningDateFrom}`);
            if (happeningDateTo) parts.push(`Happening To: ${happeningDateTo}`);
            return parts.length ? parts.join(' | ') : 'All Data';
        }

        // Export data
        function exportData() {
            if (!currentData) {
                alert('No data to export');
                return;
            }
            
            const labels = Object.keys(currentData.data);
            const values = Object.values(currentData.data);
            const totalBookings = values.reduce((sum, val) => sum + val, 0);
            
            const csvContent = "data:text/csv;charset=utf-8," 
                + "Duration (Hours),Bookings Count,Percentage\n"
                + labels.map((label, index) => {
                    const percentage = ((values[index] / totalBookings) * 100).toFixed(1);
                    return `${label},${values[index]},${percentage}%`;
                }).join("\n");
            
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "booking_duration_breakdown.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Utility functions
        function getSelectedDropdownValues(containerId) {
            const checkboxes = document.querySelectorAll(`#${containerId} input[type="checkbox"]:checked`);
            return Array.from(checkboxes).map(cb => cb.value);
        }

        function addToHistory(filtersSummary, mostPopular, mostPopularPct, avgDuration, total) {
            const now = new Date().toLocaleString();
            queryHistory.unshift({
                date: now,
                filters: filtersSummary,
                mostPopular: `${mostPopular} (${mostPopularPct}%)`,
                avgDuration: avgDuration,
                total: total
            });
            renderHistory();
            saveHistoryToStorage();
        }

        function renderHistory() {
            const tbody = document.getElementById('historyTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = '';
            queryHistory.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.date}</td>
                    <td>${item.filters}</td>
                    <td>${item.mostPopular}</td>
                    <td>${item.avgDuration}</td>
                    <td>${item.total}</td>
                `;
                tbody.appendChild(row);
            });
        }

        function saveHistoryToStorage() {
            try {
                localStorage.setItem('bookingDurationHistory', JSON.stringify(queryHistory));
            } catch (error) {
                console.error('Error saving history:', error);
            }
        }

        function loadHistoryFromStorage() {
            try {
                const stored = localStorage.getItem('bookingDurationHistory');
                if (stored) {
                    queryHistory = JSON.parse(stored);
                    renderHistory();
                }
            } catch (error) {
                console.error('Error loading history:', error);
                queryHistory = [];
            }
        }

        // Initialize tooltips and history
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function(tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
            
            // Load history on page load
            loadHistoryFromStorage();
        });
    </script>
} 