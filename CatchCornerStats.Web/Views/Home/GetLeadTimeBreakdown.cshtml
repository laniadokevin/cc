@{
    ViewData["Title"] = "Lead Time Breakdown";
}

<div class="container-fluid py-4">
    <!-- Header --> 
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center gap-2">
                    <a href="/" class="btn btn-outline-secondary btn-sm me-2" title="Volver al inicio">
                        <i class="bi bi-arrow-left"></i>
                    </a>
                    <div>
                        <h1 class="h2 mb-1 fw-bold text-primary">
                            <i class="bi bi-pie-chart me-2"></i>Lead Time Breakdown
                        </h1>
                        <p class="text-muted mb-0">Distribution of lead times for bookings. Analyze by sport, city, rink size, and facility.</p>
                    </div>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-primary" onclick="loadData()">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-funnel me-2"></i>Filters
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3 mb-2">
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Sports</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="sportsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="sportsDropdownLabel">All Sports</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="sportsDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'sportsOptions',type:'sports',labelId:'sportsDropdownLabel',defaultLabel:'All Sports'})">
                                    <div id="sportsOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Cities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="citiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="citiesDropdownLabel">All Cities</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="citiesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'citiesOptions',type:'cities',labelId:'citiesDropdownLabel',defaultLabel:'All Cities'})">
                                    <div id="citiesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Rink Sizes</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="rinkSizesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="rinkSizesDropdownLabel">All Sizes</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="rinkSizesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'rinkSizesOptions',type:'rinkSizes',labelId:'rinkSizesDropdownLabel',defaultLabel:'All Sizes'})">
                                    <div id="rinkSizesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Facilities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="facilitiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="facilitiesDropdownLabel">All Facilities</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="facilitiesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'facilitiesOptions',type:'facilities',labelId:'facilitiesDropdownLabel',defaultLabel:'All Facilities'})">
                                    <div id="facilitiesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Created Date (From)</label>
                            <input type="date" class="form-control" id="createdDateFrom">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Created Date (To)</label>
                            <input type="date" class="form-control" id="createdDateTo">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Happening Date (From)</label>
                            <input type="date" class="form-control" id="happeningDateFrom">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Happening Date (To)</label>
                            <input type="date" class="form-control" id="happeningDateTo">
                        </div>
                    </div>
                    <div class="d-flex gap-2 mb-2">
                        <button class="btn btn-primary px-4 shadow-sm" onclick="applyFilters()">
                            <i class="bi bi-funnel me-2"></i>Apply Filters
                        </button>
                        <button class="btn btn-outline-secondary px-4 shadow-sm" onclick="clearFilters()">
                            <i class="bi bi-x-circle me-2"></i>Clear Filters
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-pie-chart me-2"></i>Results
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Loading -->
                    <div id="loading" class="text-center d-none py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3">Loading data...</p>
                    </div>

                    <!-- Error -->
                    <div id="error" class="alert alert-danger d-none" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <span id="errorText">An error occurred</span>
                    </div>

                    <!-- Data -->
                    <div id="data" class="d-none">
                        <div class="row mb-4 g-3">
                            <div class="col-md-6">
                                <div class="card border-0 bg-gradient-primary text-white shadow-sm h-100">
                                    <div class="card-body">
                                        <h6 class="fw-bold mb-3"><i class="bi bi-pie-chart me-2"></i>Pie Chart</h6>
                                        <div class="chart-container" style="height: 300px;">
                                            <canvas id="leadTimePieChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card border-0 bg-gradient-success text-white shadow-sm h-100">
                                    <div class="card-body">
                                        <h6 class="fw-bold mb-3"><i class="bi bi-bar-chart me-2"></i>Bar Chart</h6>
                                        <div class="chart-container" style="height: 300px;">
                                            <canvas id="leadTimeBarChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Results Table -->
                        <div class="table-responsive mb-3">
                            <table class="table table-hover align-middle rounded shadow-sm">
                                <thead class="table-light">
                                    <tr>
                                        <th>Days in Advance</th>
                                        <th>Percentage (%)</th>
                                    </tr>
                                </thead>
                                <tbody id="detailsTableBody"></tbody>
                            </table>
                        </div>

                        <!-- Last Updated -->
                        <div class="mt-3 text-muted small">
                            Last updated: <span id="lastUpdated">Never</span>
                        </div>

                        <!-- Historial de Consultas -->
                        <div class="mt-4">
                            <h6 class="fw-bold mb-2">
                                <i class="bi bi-clock-history me-2"></i>Historial de Consultas
                                <button class="btn btn-sm btn-outline-danger ms-2" onclick="clearHistory()" title="Clear History">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </h6>
                            <div class="table-responsive">
                                <table class="table table-sm table-bordered align-middle">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Fecha/Hora</th>
                                            <th>Filtros</th>
                                            <th>Top 3 Days in Advance</th>
                                        </tr>
                                    </thead>
                                    <tbody id="historyTable">
                                        <!-- Historial se llena por JS -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let pieChart = null;
        let barChart = null;
        let currentData = null;
        let filtersReady = false;
        let initialDataLoaded = false;
        
        // Función para inicializar la vista
        async function initializeView() {
            try {
                ConfigHelpers.log('Iniciando vista GetLeadTimeBreakdown...');
                
                // Verificar que SharedFilters esté disponible
                if (typeof initializeSharedFilters !== 'function') {
                    ConfigHelpers.logError('SharedFilters not available');
                    return;
                }
                
                // CARGAR DATOS INMEDIATAMENTE (sin filtros)
                ConfigHelpers.log('Cargando datos iniciales sin filtros...');
                await loadDataWithoutFilters();
                initialDataLoaded = true;
                
                // INICIALIZAR FILTROS EN PARALELO (sin bloquear)
                ConfigHelpers.log('Inicializando filtros en paralelo...');
                initializeFiltersAsync();
                
            } catch (error) {
                ConfigHelpers.logError('Error inicializando vista:', error);
                showError('Error inicializando la vista: ' + error.message);
            }
        }
        
        // Inicializar filtros de forma asíncrona
        async function initializeFiltersAsync() {
            try {
                // Inicializar filtros compartidos
                await initializeSharedFilters();
                ConfigHelpers.log('Filtros compartidos inicializados');
                
                // Verificar que los elementos del DOM estén listos
                const requiredElements = ['sportsOptions', 'citiesOptions', 'rinkSizesOptions', 'facilitiesOptions'];
                const missingElements = requiredElements.filter(id => !document.getElementById(id));
                
                if (missingElements.length > 0) {
                    ConfigHelpers.logError('Elementos faltantes:', missingElements);
                    return;
                }
                
                // Inicializar UI de filtros
                if (typeof initializeFilterUI === 'function') {
                    initializeFilterUI();
                    ConfigHelpers.log('Filtros visuales renderizados');
                }
                
                filtersReady = true;
                ConfigHelpers.log('Filtros listos');
                
                // Si ya se cargaron datos iniciales, recargar con filtros
                if (initialDataLoaded) {
                    ConfigHelpers.log('Recargando datos con filtros...');
                    await loadData();
                }
                
                // Configurar listener para cambios de filtros
                addFilterChangeListener(() => {
                    ConfigHelpers.log('Filtros cambiados, recargando datos...');
                    loadData();
                });
                
            } catch (error) {
                ConfigHelpers.logError('Error inicializando filtros:', error);
            }
        }
        
        // Cargar datos sin filtros (carga inicial rápida)
        async function loadDataWithoutFilters() {
            try {
                showLoading();
                hideError();
                
                // Usar las utilidades de API optimizadas
                const data = await API_UTILS.loadStatsData('leadTimeBreakdown');
                displayData(data, 'Carga inicial sin filtros');
                
            } catch (error) {
                ConfigHelpers.logError('Error cargando datos iniciales:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadDataWithoutFilters');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }
        
        // Inicializar cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', initializeView);
        
        // También inicializar si el DOM ya está listo (para navegación SPA)
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeView);
        } else {
            initializeView();
        }

        // Cargar datos desde la API usando los filtros globales
        async function loadData() {
            if (!filtersReady) {
                ConfigHelpers.log('loadData() abortado: filtros no listos');
                return;
            }
            
            try {
                showLoading();
                hideError();
                
                const params = buildApiParameters();
                
                // Usar las utilidades de API optimizadas
                const data = await API_UTILS.loadStatsData('leadTimeBreakdown', params);
                displayData(data, 'Datos con filtros aplicados');
                
            } catch (error) {
                ConfigHelpers.logError('Error cargando datos:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadData');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }

        // Botón para aplicar filtros (solo recarga datos)
        function applyFilters() {
            ConfigHelpers.log('Aplicando filtros...');
            loadData();
        }

        // Botón para limpiar filtros globales y recargar datos
        function clearFilters() {
            ConfigHelpers.log('Limpiando filtros...');
            clearAllFilters();
            loadData();
        }

        // Mostrar datos en la UI
        function displayData(data, source = '') {
            currentData = data;
            ConfigHelpers.log(`Mostrando datos (${source}):`, data);
            
            if (!data || Object.keys(data).length === 0) {
                document.getElementById('data').classList.add('d-none');
                return;
            }
            
            // Pie chart
            const pieCtx = document.getElementById('leadTimePieChart');
            if (pieChart) pieChart.destroy();
            pieChart = new Chart(pieCtx, {
                type: 'pie',
                data: {
                    labels: Object.keys(data),
                    datasets: [{
                        data: Object.values(data),
                        backgroundColor: [
                            '#0d6efd', '#198754', '#ffc107', '#dc3545',
                            '#0dcaf0', '#6f42c1', '#fd7e14', '#20c997'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: { legend: { position: 'bottom' } }
                }
            });
            
            // Bar chart
            const barCtx = document.getElementById('leadTimeBarChart');
            if (barChart) barChart.destroy();
            barChart = new Chart(barCtx, {
                type: 'bar',
                data: {
                    labels: Object.keys(data),
                    datasets: [{
                        label: 'Percentage',
                        data: Object.values(data),
                        backgroundColor: '#0d6efd'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: { legend: { display: false } },
                    scales: { y: { beginAtZero: true, title: { display: true, text: '%' } } }
                }
            });
            
            // Table
            const tbody = document.getElementById('detailsTableBody');
            tbody.innerHTML = '';
            Object.entries(data).forEach(([days, percent]) => {
                const row = document.createElement('tr');
                row.innerHTML = `<td>${days}</td><td>${percent.toFixed(2)}</td>`;
                tbody.appendChild(row);
            });

            document.getElementById('data').classList.remove('d-none');
            document.getElementById('lastUpdated').textContent = new Date().toLocaleString();

            // Guardar en historial (solo si hay datos)
            if (data && Object.keys(data).length > 0) {
                const top3 = Object.entries(data)
                    .sort((a, b) => b[1] - a[1])
                    .slice(0, 3)
                    .map(([days, percent]) => `${days}d (${percent.toFixed(1)}%)`).join(', ');
                
                const filtersSummary = (typeof getFiltersSummary === 'function') ? getFiltersSummary() : 'All Data';
                
                saveHistoryEntry({
                    date: new Date().toLocaleString(),
                    filters: filtersSummary,
                    top3: top3
                });
                renderHistory();
            }
        }
        
        function showLoading() {
            document.getElementById('loading').classList.remove('d-none');
            document.getElementById('data').classList.add('d-none');
            document.getElementById('error').classList.add('d-none');
        }
        
        function hideLoading() {
            document.getElementById('loading').classList.add('d-none');
        }
        
        function showError(message) {
            document.getElementById('errorText').textContent = message;
            document.getElementById('error').classList.remove('d-none');
            document.getElementById('data').classList.add('d-none');
        }
        
        function hideError() {
            document.getElementById('error').classList.add('d-none');
        }

        // Guardar historial en localStorage
        function saveHistoryEntry(entry) {
            let history = JSON.parse(localStorage.getItem('leadTimeBreakdownHistory') || '[]');
            history.unshift(entry); // Agrega al inicio
            if (history.length > 20) history = history.slice(0, 20); // Max 20 entries
            localStorage.setItem('leadTimeBreakdownHistory', JSON.stringify(history));
        }

        // Mostrar historial en la tabla
        function renderHistory() {
            const tbody = document.getElementById('historyTable');
            if (!tbody) return;
            let history = JSON.parse(localStorage.getItem('leadTimeBreakdownHistory') || '[]');
            tbody.innerHTML = '';
            if (history.length === 0) {
                tbody.innerHTML = '<tr><td colspan="3" class="text-center text-muted">No hay historial</td></tr>';
                return;
            }
            history.forEach(item => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${item.date}</td>
                    <td>${item.filters}</td>
                    <td>${item.top3}</td>
                `;
                tbody.appendChild(tr);
            });
        }

        // Limpiar historial
        function clearHistory() {
            localStorage.removeItem('leadTimeBreakdownHistory');
            renderHistory();
        }

        // Renderizar historial al cargar
        document.addEventListener('DOMContentLoaded', renderHistory);

        // Inicializar tooltips de Bootstrap
        document.addEventListener('DOMContentLoaded', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
} 