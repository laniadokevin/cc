@{
    ViewData["Title"] = "Monthly Report";
}

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                <div>
                    <div class="d-flex align-items-center gap-3 mb-2">
                        <a href="@Url.Action("Index", "Home")" class="btn btn-outline-secondary btn-sm">
                            <i class="bi bi-arrow-left me-1"></i>Back
                        </a>
                        <h1 class="h2 mb-0 fw-bold text-primary">
                            <i class="bi bi-calendar3-event me-2"></i>Monthly Report
                        </h1>
                    </div>
                    <p class="text-muted mb-0">Global monthly booking trends with performance indicators. Track growth patterns and identify areas needing attention across all facilities.</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary shadow-sm" onclick="exportData()">
                        <i class="bi bi-download me-2"></i>Export
                    </button>
                    <button class="btn btn-primary shadow-sm" onclick="loadData()">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom-0">
                    <h5 class="card-title mb-0 text-secondary">
                        <i class="bi bi-funnel me-2"></i>Filters
                    </h5>
                </div>
                <div class="card-body pb-2">
                    <div class="row g-3 mb-3">
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Sports</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="sportsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="sportsDropdownLabel">All Sports</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="sportsDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'sportsOptions',type:'sports',labelId:'sportsDropdownLabel',defaultLabel:'All Sports'})">
                                    <div id="sportsOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Cities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="citiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="citiesDropdownLabel">All Cities</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="citiesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'citiesOptions',type:'cities',labelId:'citiesDropdownLabel',defaultLabel:'All Cities'})">
                                    <div id="citiesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Rink Sizes</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="rinkSizesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="rinkSizesDropdownLabel">All Sizes</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="rinkSizesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'rinkSizesOptions',type:'rinkSizes',labelId:'rinkSizesDropdownLabel',defaultLabel:'All Sizes'})">
                                    <div id="rinkSizesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Facilities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="facilitiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="facilitiesDropdownLabel">All Facilities</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="facilitiesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'facilitiesOptions',type:'facilities',labelId:'facilitiesDropdownLabel',defaultLabel:'All Facilities'})">
                                    <div id="facilitiesOptions"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex gap-2 mb-3">
                        <button class="btn btn-primary px-4 shadow-sm" onclick="applyFilters()">
                            <i class="bi bi-funnel me-2"></i>Apply Filters
                        </button>
                        <button class="btn btn-outline-secondary px-4 shadow-sm" onclick="clearFilters()">
                            <i class="bi bi-x-circle me-2"></i>Clear Filters
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-lg">
                <div class="card-header bg-white border-bottom-0">
                    <h5 class="card-title mb-0 text-primary">
                        <i class="bi bi-graph-up me-2"></i>Monthly Report Results
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Loading -->
                    <div id="loading" class="text-center d-none py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3">Loading monthly report data...</p>
                    </div>

                    <!-- Error -->
                    <div id="error" class="alert alert-danger d-none" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <span id="errorText">An error occurred</span>
                    </div>

                    <!-- Data -->
                    <div id="data" class="d-none">
                        <!-- Summary Cards -->
                        <div class="row mb-4 g-3">
                            <div class="col-md-3">
                                <div class="card bg-gradient-primary text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-clipboard-data display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="totalBookings">0</h2>
                                        <p class="mb-0">Total Bookings</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-gradient-success text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-bar-chart-steps display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="avgBookings">0</h2>
                                        <p class="mb-0">Avg per Month</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-gradient-danger text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-flag display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="dropFlags">0</h2>
                                        <p class="mb-0">Drop Flags</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-gradient-info text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-graph-up-arrow display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="growthRate">0%</h2>
                                        <p class="mb-0">Growth Rate</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Results Table -->
                        <div class="table-responsive">
                            <!-- Help Section -->
                            <div class="alert alert-info mb-3">
                                <h6 class="alert-heading mb-2">
                                    <i class="bi bi-info-circle me-2"></i>How to read this report
                                </h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <strong>Columns:</strong>
                                        <ul class="mb-0 mt-1">
                                            <li><strong>Month:</strong> Month and year of the report period</li>
                                            <li><strong>Bookings:</strong> Total number of bookings for this month</li>
                                            <li><strong>Previous Month:</strong> Total bookings from the previous month</li>
                                            <li><strong>Change:</strong> Percentage change from previous month</li>
                                            <li><strong>Status:</strong> Performance indicator based on growth rate</li>
                                        </ul>
                                    </div>
                                    <div class="col-md-6">
                                        <strong>Status Levels:</strong>
                                        <ul class="mb-0 mt-1">
                                            <li><span class="badge bg-success">Excellent</span> >10% growth</li>
                                            <li><span class="badge bg-primary">Good</span> 5-10% growth</li>
                                            <li><span class="badge bg-info">Stable</span> 0-5% growth</li>
                                            <li><span class="badge bg-warning">Declining</span> 0 to -5%</li>
                                            <li><span class="badge bg-danger">Poor</span> -5 to -50%</li>
                                            <li><span class="badge bg-dark">Critical</span> < -50%</li>
                                        </ul>
                                    </div>
                                </div>
                                <hr class="my-2">
                                <small class="text-muted">
                                    <i class="bi bi-lightbulb me-1"></i>
                                    <strong>Note:</strong> This report shows global trends across all facilities. Status is calculated based on month-over-month booking changes. 
                                    The first month will show "No Data" for Previous Month and Status since there's no baseline for comparison.
                                </small>
                            </div>
                            
                            <table class="table table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th>Month <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Month and year of the report period (MM/YYYY format)"></i></th>
                                        <th>Bookings <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Total number of unique bookings for this month"></i></th>
                                        <th>Previous Month <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Total bookings from the previous month for comparison"></i></th>
                                        <th>Change <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Percentage change from previous month. Green = growth, Red = decline"></i></th>
                                        <th>Status <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Performance indicator: Excellent (>10%), Good (5-10%), Stable (0-5%), Declining (0 to -5%), Poor (-5 to -50%), Critical (<-50%)"></i></th>
                                    </tr>
                                </thead>
                                <tbody id="resultsTable">
                                    <!-- Data will be populated here -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Last Updated -->
                        <div class="mt-3 text-muted small">
                            Last updated: <span id="lastUpdated">Never</span>
                        </div>

                        <!-- Historial de Consultas -->
                        <div class="mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="fw-bold mb-0"><i class="bi bi-clock-history me-2"></i>Historial de Consultas</h6>
                                <button class="btn btn-outline-danger btn-sm" onclick="clearHistory()">
                                    <i class="bi bi-trash me-1"></i>Limpiar Historial
                                </button>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-sm table-bordered">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Fecha</th>
                                            <th>Filtros</th>
                                            <th>Total Bookings</th>
                                            <th>Drop Flags</th>
                                        </tr>
                                    </thead>
                                    <tbody id="historyTable">
                                        <!-- Historial se llena dinámicamente -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Variables globales
        let currentData = null;
        let filtersReady = false;

        // Inicializar la vista con carga optimizada
        async function initializeView() {
            ConfigHelpers?.log('=== Monthly Report View Initialization ===');
            
            try {
                // Cargar datos inmediatamente sin filtros
                await loadDataWithoutFilters();
                
                // Inicializar filtros en paralelo
                if (typeof initializeSharedFilters === 'function') {
                    await initializeSharedFilters();
                    filtersReady = true;
                    
                    // Callback cuando los filtros estén listos
                    if (typeof setFiltersReadyCallback === 'function') {
                        setFiltersReadyCallback(() => {
                            ConfigHelpers?.log('Filtros listos, recargando datos...');
                            loadData();
                        });
                    }
                } else {
                    ConfigHelpers?.log('SharedFilters no disponible, usando filtros básicos');
                    filtersReady = true;
                }
                
            } catch (error) {
                ConfigHelpers?.logError('Error inicializando vista:', error);
            }
        }
        
        // Cargar datos sin filtros (carga inicial rápida)
        async function loadDataWithoutFilters() {
            try {
                showLoading();
                hideError();
                // Usar el nuevo endpoint global
                const data = await API_UTILS.fetchApi('/Stats/GetMonthlyReportGlobal');
                displayData(data, 'Carga inicial sin filtros');
            } catch (error) {
                ConfigHelpers?.logError('Error cargando datos iniciales:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadDataWithoutFilters');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }
        
        // Inicializar cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', initializeView);
        
        // También inicializar si el DOM ya está listo (para navegación SPA)
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeView);
        } else {
            initializeView();
        }

        // Cargar datos desde la API usando los filtros globales
        async function loadData() {
            try {
                showLoading();
                hideError();
                // Obtener filtros actuales
                let params = {};
                if (typeof getCurrentFilterSelections === 'function') {
                    params = getCurrentFilterSelections();
                }
                const data = await API_UTILS.fetchApi('/Stats/GetMonthlyReportGlobal', { params });
                displayData(data, 'Datos filtrados');
            } catch (error) {
                ConfigHelpers?.logError('Error cargando datos:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadData');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }

        // Mostrar datos en la UI (ahora es un array simple)
        function displayData(data, source = '') {
            currentData = data;
            ConfigHelpers?.log(`Mostrando datos (${source}):`, data);
            if (!data || !Array.isArray(data) || data.length === 0) {
                showError('No data available for monthly report');
                return;
            }
            
            // Calcular métricas para el historial
            const totalBookings = data.reduce((sum, item) => sum + (item.totalBookings || 0), 0);
            const dropFlags = data.filter(item => {
                const change = item.percentageChange;
                return change !== null && change !== undefined && change <= -50;
            }).length;
            
            // Obtener filtros actuales para el historial
            let currentFilters = 'Sin filtros';
            if (typeof getCurrentFilterSelections === 'function') {
                const filters = getCurrentFilterSelections();
                const filterParts = [];
                if (filters.sports && filters.sports.length > 0) filterParts.push(`Sports: ${filters.sports.join(', ')}`);
                if (filters.cities && filters.cities.length > 0) filterParts.push(`Cities: ${filters.cities.join(', ')}`);
                if (filters.rinkSizes && filters.rinkSizes.length > 0) filterParts.push(`Rink Sizes: ${filters.rinkSizes.join(', ')}`);
                if (filters.facilities && filters.facilities.length > 0) filterParts.push(`Facilities: ${filters.facilities.join(', ')}`);
                if (filterParts.length > 0) {
                    currentFilters = filterParts.join(' | ');
                }
            }
            
            // Guardar en historial
            const historyEntry = {
                date: new Date().toLocaleString(),
                filters: currentFilters,
                totalBookings: formatNumber(totalBookings),
                dropFlags: dropFlags,
                source: source
            };
            saveHistoryEntry(historyEntry);
            
            updateSummaryCards(data);
            updateDataTable(data);
            renderHistory(); // Actualizar la tabla de historial
            document.getElementById('data').classList.remove('d-none');
            document.getElementById('lastUpdated').textContent = new Date().toLocaleString();
        }

        // Actualizar tarjetas resumen
        function updateSummaryCards(data) {
            const totalBookings = data.reduce((sum, item) => sum + (item.totalBookings || 0), 0);
            const avgBookings = totalBookings / data.length;

            // Drop Flags: cuenta los meses con status Critical (<= -50%)
            const dropFlags = data.filter(item => {
                const change = item.percentageChange;
                return change !== null && change !== undefined && change <= -50;
            }).length;

            // Growth Rate: usa el cambio del mes más reciente (primer elemento si está ordenado DESC)
            let growthRate = 0;
            if (data.length > 0 && data[0].percentageChange !== null && data[0].percentageChange !== undefined) {
                growthRate = data[0].percentageChange;
            }

            document.getElementById('totalBookings').textContent = formatNumber(totalBookings);
            document.getElementById('avgBookings').textContent = formatNumber(Math.round(avgBookings));
            document.getElementById('dropFlags').textContent = dropFlags;
            document.getElementById('growthRate').textContent = `${growthRate.toFixed(1)}%`;
        }

        // Actualizar tabla de resultados
        function updateDataTable(data) {
            const tbody = document.getElementById('resultsTable');
            tbody.innerHTML = '';
            data.forEach(item => {
                const row = document.createElement('tr');
                const change = item.percentageChange || 0;
                const changeIndicator = getChangeIndicator(change);
                const statusIndicator = getStatusIndicator(change);
                row.innerHTML = `
                    <td><strong>${item.monthYear}</strong></td>
                    <td>${formatNumber(item.totalBookings || 0)}</td>
                    <td>${formatNumber(item.previousMonthBookings || 0)}</td>
                    <td>${changeIndicator}</td>
                    <td>${statusIndicator}</td>
                `;
                tbody.appendChild(row);
            });
        }

        // Helper para cambio
        function getChangeIndicator(change) {
            if (change > 0) {
                return `<span class="text-success"><i class="bi bi-arrow-up"></i> +${change.toFixed(1)}%</span>`;
            } else if (change < 0) {
                return `<span class="text-danger"><i class="bi bi-arrow-down"></i> ${change.toFixed(1)}%</span>`;
            } else {
                return `<span class="text-muted"><i class="bi bi-dash"></i> 0%</span>`;
            }
        }

        // Helper para status
        function getStatusIndicator(change) {
            if (change === null || change === undefined) {
                return `<span class="badge bg-secondary">No Data</span>`;
            } else if (change > 10) {
                return `<span class="badge bg-success">Excellent</span>`;
            } else if (change > 5) {
                return `<span class="badge bg-primary">Good</span>`;
            } else if (change > 0) {
                return `<span class="badge bg-info">Stable</span>`;
            } else if (change > -5) {
                return `<span class="badge bg-warning">Declining</span>`;
            } else if (change > -50) {
                return `<span class="badge bg-danger">Poor</span>`;
            } else {
                return `<span class="badge bg-dark">Critical</span>`;
            }
        }

        function formatNumber(num) {
            return new Intl.NumberFormat().format(num);
        }

        // Botón para aplicar filtros (recarga datos con filtros)
        function applyFilters() {
            ConfigHelpers?.log('Aplicando filtros...');
            loadData();
        }

        // Botón para limpiar filtros globales y recargar datos
        function clearFilters() {
            ConfigHelpers?.log('Limpiando filtros...');
            if (typeof clearAllFilters === 'function') {
                clearAllFilters();
            }
            loadData();
        }

        // Export function
        function exportData() {
            if (!currentData || currentData.length === 0) {
                alert('No data to export');
                return;
            }
            
            const csvContent = generateCSV(currentData);
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `monthly-report-${new Date().toISOString().split('T')[0]}.csv`;
            a.click();
            window.URL.revokeObjectURL(url);
        }

        function generateCSV(data) {
            const headers = ['Month', 'Total Bookings', 'Previous Month', 'Change %', 'Status'];
            const rows = data.map(item => {
                const change = item.percentageChange || 0;
                const status = getStatusText(change);
                return [
                    item.monthYear,
                    item.totalBookings || 0,
                    item.previousMonthBookings || 0,
                    change.toFixed(1),
                    status
                ];
            });
            
            return [headers, ...rows].map(row => row.join(',')).join('\n');
        }

        // Helper para obtener texto del status (sin HTML)
        function getStatusText(change) {
            if (change === null || change === undefined) {
                return 'No Data';
            } else if (change > 10) {
                return 'Excellent';
            } else if (change > 5) {
                return 'Good';
            } else if (change > 0) {
                return 'Stable';
            } else if (change > -5) {
                return 'Declining';
            } else if (change > -50) {
                return 'Poor';
            } else {
                return 'Critical';
            }
        }

        // Guardar historial en localStorage
        function saveHistoryEntry(entry) {
            let history = JSON.parse(localStorage.getItem('monthlyReportHistory') || '[]');
            history.unshift(entry); // Agrega al inicio
            if (history.length > 20) history = history.slice(0, 20); // Max 20 entries
            localStorage.setItem('monthlyReportHistory', JSON.stringify(history));
        }

        // Mostrar historial en la tabla
        function renderHistory() {
            const tbody = document.getElementById('historyTable');
            if (!tbody) return;
            let history = JSON.parse(localStorage.getItem('monthlyReportHistory') || '[]');
            tbody.innerHTML = '';
            if (history.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">No hay historial</td></tr>';
                return;
            }
            history.forEach(item => {
                const tr = document.createElement('tr');
                const sourceBadge = item.source ? `<span class="badge bg-secondary ms-1">${item.source}</span>` : '';
                tr.innerHTML = `
                    <td><small>${item.date}</small></td>
                    <td><small>${item.filters}${sourceBadge}</small></td>
                    <td><strong>${item.totalBookings}</strong></td>
                    <td><span class="badge bg-${item.dropFlags > 0 ? 'danger' : 'success'}">${item.dropFlags}</span></td>
                `;
                tbody.appendChild(tr);
            });
        }

        // Renderizar historial al cargar
        document.addEventListener('DOMContentLoaded', renderHistory);

        // Inicializar tooltips de Bootstrap
        document.addEventListener('DOMContentLoaded', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        function showLoading() {
            document.getElementById('loading').classList.remove('d-none');
            document.getElementById('data').classList.add('d-none');
            document.getElementById('error').classList.add('d-none');
        }

        function hideLoading() {
            document.getElementById('loading').classList.add('d-none');
        }

        function showError(message) {
            document.getElementById('errorText').textContent = message;
            document.getElementById('error').classList.remove('d-none');
            document.getElementById('data').classList.add('d-none');
        }

        function hideError() {
            document.getElementById('error').classList.add('d-none');
        }

        // Botón para limpiar historial
        function clearHistory() {
            if (confirm('¿Estás seguro de que quieres limpiar todo el historial de consultas?')) {
                ConfigHelpers?.log('Limpiando historial...');
                localStorage.removeItem('monthlyReportHistory');
                renderHistory();
            }
        }
    </script>
} 