@{
    ViewData["Title"] = "Monthly Report";
}

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                <div>
                    <h1 class="h2 mb-1 fw-bold text-primary">
                        <i class="bi bi-calendar3-event me-2"></i>Monthly Report
                    </h1>
                    <p class="text-muted mb-0">Comprehensive monthly booking reports with trend analysis and drop flags.</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary shadow-sm" onclick="exportData()">
                        <i class="bi bi-download me-2"></i>Export
                    </button>
                    <button class="btn btn-primary shadow-sm" onclick="loadData()">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom-0">
                    <h5 class="card-title mb-0 text-secondary">
                        <i class="bi bi-funnel me-2"></i>Filters
                    </h5>
                </div>
                <div class="card-body pb-2">
                    <div class="row g-3 mb-3">
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Sports</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="sportsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="sportsDropdownLabel">All Sports</span>
                                </button>
                                <ul class="dropdown-menu w-100 p-2" aria-labelledby="sportsDropdown" style="max-height: 300px; overflow-y: auto; z-index: 1051;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'sportsOptions',type:'sports',labelId:'sportsDropdownLabel',defaultLabel:'All Sports'})">
                                    <div id="sportsOptions"></div>
                                </ul>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Cities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="citiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="citiesDropdownLabel">All Cities</span>
                                </button>
                                <ul class="dropdown-menu w-100 p-2" aria-labelledby="citiesDropdown" style="max-height: 300px; overflow-y: auto; z-index: 1051;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'citiesOptions',type:'cities',labelId:'citiesDropdownLabel',defaultLabel:'All Cities'})">
                                    <div id="citiesOptions"></div>
                                </ul>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Rink Sizes</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="rinkSizesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="rinkSizesDropdownLabel">All Sizes</span>
                                </button>
                                <ul class="dropdown-menu w-100 p-2" aria-labelledby="rinkSizesDropdown" style="max-height: 300px; overflow-y: auto; z-index: 1051;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'rinkSizesOptions',type:'rinkSizes',labelId:'rinkSizesDropdownLabel',defaultLabel:'All Sizes'})">
                                    <div id="rinkSizesOptions"></div>
                                </ul>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Facilities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="facilitiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="facilitiesDropdownLabel">All Facilities</span>
                                </button>
                                <ul class="dropdown-menu w-100 p-2" aria-labelledby="facilitiesDropdown" style="max-height: 300px; overflow-y: auto; z-index: 1051;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'facilitiesOptions',type:'facilities',labelId:'facilitiesDropdownLabel',defaultLabel:'All Facilities'})">
                                    <div id="facilitiesOptions"></div>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="row g-3 mb-3">
                        <div class="col-md-4">
                            <label class="form-label fw-semibold">Year Range</label>
                            <select class="form-select" id="yearRangeFilter">
                                <option value="all">All Years</option>
                                <option value="2024">2024</option>
                                <option value="2023">2023</option>
                                <option value="2022">2022</option>
                                <option value="2021">2021</option>
                                <option value="custom">Custom Range</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label fw-semibold">Report Type</label>
                            <select class="form-select" id="reportTypeFilter">
                                <option value="all">All Reports</option>
                                <option value="summary">Monthly Summary</option>
                                <option value="trends">Trend Analysis</option>
                                <option value="comparison">Year Comparison</option>
                                <option value="forecast">Forecast</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label fw-semibold">Chart Type</label>
                            <select class="form-select" id="chartTypeFilter">
                                <option value="line">Line Chart</option>
                                <option value="bar">Bar Chart</option>
                                <option value="area">Area Chart</option>
                                <option value="mixed">Mixed Chart</option>
                            </select>
                        </div>
                    </div>
                    <div class="d-flex gap-2 mb-3">
                        <button class="btn btn-primary px-4 shadow-sm" onclick="applyFilters()">
                            <i class="bi bi-funnel me-2"></i>Apply Filters
                        </button>
                        <button class="btn btn-outline-secondary px-4 shadow-sm" onclick="clearFilters()">
                            <i class="bi bi-x-circle me-2"></i>Clear Filters
                        </button>
                        <button class="btn btn-outline-info px-4 shadow-sm" onclick="toggleAdvancedFilters()">
                            <i class="bi bi-gear me-2"></i>Advanced
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-lg">
                <div class="card-header bg-white border-bottom-0">
                    <h5 class="card-title mb-0 text-primary">
                        <i class="bi bi-graph-up me-2"></i>Monthly Report Results
                    </h5>
                </div>
                <div class="card-body">
                    <div id="loadingSpinner" class="text-center d-none py-5">
                        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3 text-primary">Loading monthly report data...</p>
                    </div>
                    <div id="errorMessage" class="alert alert-danger d-none" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <span id="errorText">An error occurred while loading data.</span>
                    </div>
                    <div id="dataContainer" class="d-none">
                        <!-- Summary Cards -->
                        <div class="row mb-4 g-3">
                            <div class="col-md-3">
                                <div class="card bg-gradient-primary text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-clipboard-data display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="totalBookings">0</h2>
                                        <p class="mb-0">Total Bookings</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-gradient-success text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-bar-chart-steps display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="avgBookings">0</h2>
                                        <p class="mb-0">Avg per Month</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-gradient-danger text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-flag display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="dropFlags">0</h2>
                                        <p class="mb-0">Drop Flags</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-gradient-info text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-graph-up-arrow display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="growthRate">0%</h2>
                                        <p class="mb-0">Growth Rate</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Trend Analysis -->
                        <div class="row mb-4 g-3">
                            <div class="col-12">
                                <div class="card border-0 bg-gradient-primary text-white shadow-sm h-100">
                                    <div class="card-header bg-transparent border-bottom-0">
                                        <h6 class="fw-bold mb-3">
                                            <i class="bi bi-trending-up me-2"></i>Monthly Trends Analysis
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="chart-container" style="height: 400px;">
                                            <canvas id="monthlyTrendChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Performance Metrics & Seasonal Patterns -->
                        <div class="row mb-4 g-3">
                            <div class="col-md-6">
                                <div class="card border-0 bg-gradient-success text-white shadow-sm h-100">
                                    <div class="card-header bg-transparent border-bottom-0">
                                        <h6 class="fw-bold mb-3">
                                            <i class="bi bi-speedometer2 me-2"></i>Performance Metrics
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="chart-container" style="height: 300px;">
                                            <canvas id="performanceChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card border-0 bg-gradient-warning text-white shadow-sm h-100">
                                    <div class="card-header bg-transparent border-bottom-0">
                                        <h6 class="fw-bold mb-3">
                                            <i class="bi bi-calendar-check me-2"></i>Seasonal Patterns
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="chart-container" style="height: 300px;">
                                            <canvas id="seasonalChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Detailed Data Table -->
                        <div class="row mb-4 g-3">
                            <div class="col-12">
                                <div class="card border-0 shadow-sm">
                                    <div class="card-header bg-white border-bottom-0">
                                        <h6 class="fw-bold mb-3">
                                            <i class="bi bi-table me-2"></i>Monthly Breakdown
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="table-responsive mb-2">
                                            <table class="table table-hover align-middle rounded shadow-sm">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th onclick="sortTable('month')" style="cursor: pointer;">
                                                            Month <i class="bi bi-arrow-down-up"></i>
                                                        </th>
                                                        <th onclick="sortTable('bookings')" style="cursor: pointer;">
                                                            Bookings <i class="bi bi-arrow-down-up"></i>
                                                        </th>
                                                        <th onclick="sortTable('previousMonth')" style="cursor: pointer;">
                                                            Previous Month <i class="bi bi-arrow-down-up"></i>
                                                        </th>
                                                        <th onclick="sortTable('change')" style="cursor: pointer;">
                                                            Change <i class="bi bi-arrow-down-up"></i>
                                                        </th>
                                                        <th>Drop Flag</th>
                                                        <th>Trend</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="dataTableBody">
                                                    <!-- Data will be populated here -->
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Insights Section -->
                        <div class="row mb-4 g-3">
                            <div class="col-12">
                                <div class="card border-0 shadow-sm">
                                    <div class="card-header bg-white border-bottom-0">
                                        <h6 class="fw-bold mb-3">
                                            <i class="bi bi-lightbulb me-2"></i>Key Insights & Recommendations
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        <div id="insightsContainer">
                                            <!-- Insights will be populated here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Query History Table -->
                        <div class="table-responsive mb-3">
                            <h6 class="fw-bold mt-4 mb-2">
                                <i class="bi bi-clock-history me-2"></i>Query History
                                <button class="btn btn-sm btn-outline-danger ms-2" onclick="clearHistory()" title="Clear History">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </h6>
                            <table class="table table-sm table-bordered align-middle" id="historyTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Date/Time</th>
                                        <th>Filters</th>
                                        <th>Biggest Drop (Facility/Month)</th>
                                        <th>Total Bookings</th>
                                        <th>Drop Flags</th>
                                    </tr>
                                </thead>
                                <tbody id="historyTableBody">
                                    <!-- History rows go here -->
                                </tbody>
                            </table>
                        </div>
                        <div class="d-flex justify-content-between align-items-center mt-3 small">
                            <div>
                                <span class="text-muted">Last updated: <span id="lastUpdated">Never</span></span>
                            </div>
                            <div>
                                <span class="text-muted">API Endpoint: <code>/api/Stats/GetMonthlyReport</code></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentData = null;
        let trendChart = null;
        let performanceChart = null;
        let seasonalChart = null;
        let sortColumn = 'month';
        let sortDirection = 'asc';
        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        let queryHistory = [];
        let filtersReady = false;

        // Inicializar filtros y vista
        document.addEventListener('DOMContentLoaded', initializeView);

        async function initializeView() {
            try {
                if (typeof initializeSharedFilters !== 'function') {
                    console.error('SharedFilters not available');
                    return;
                }
                await initializeSharedFilters();
                filtersReady = true;
                populateAllDropdowns();
                restoreFilterSelections();
                setupEventListeners();
                loadData();
            } catch (error) {
                console.error('Error initializing filters:', error);
            }
        }

        function populateAllDropdowns() {
            const mappings = [
                { containerId: 'sportsOptions', type: 'sports', labelId: 'sportsDropdownLabel', defaultLabel: 'All Sports' },
                { containerId: 'citiesOptions', type: 'cities', labelId: 'citiesDropdownLabel', defaultLabel: 'All Cities' },
                { containerId: 'rinkSizesOptions', type: 'rinkSizes', labelId: 'rinkSizesDropdownLabel', defaultLabel: 'All Sizes' },
                { containerId: 'facilitiesOptions', type: 'facilities', labelId: 'facilitiesDropdownLabel', defaultLabel: 'All Facilities' }
            ];
            mappings.forEach(mapping => {
                simpleFilterDropdown(mapping);
            });
        }

        function setupEventListeners() {
            document.getElementById('yearRangeFilter').addEventListener('change', function() {
                if (this.value === 'custom') {
                    alert('Custom year range feature coming soon!');
                    this.value = 'all';
                }
            });
            document.getElementById('reportTypeFilter').addEventListener('change', function() {
                if (currentData) updateChart();
            });
            document.getElementById('chartTypeFilter').addEventListener('change', function() {
                if (currentData) updateChart();
            });
        }

        function applyFilters() {
            loadData();
        }

        function clearFilters() {
            clearAllFilters();
            loadData();
        }

        function getFiltersSummary() {
            const s = SharedFilters.selections;
            const parts = [];
            if (s.sports.length) parts.push(`Sport: ${s.sports.join(', ')}`);
            if (s.cities.length) parts.push(`City: ${s.cities.join(', ')}`);
            if (s.rinkSizes.length) parts.push(`Rink Size: ${s.rinkSizes.join(', ')}`);
            if (s.facilities.length) parts.push(`Facility: ${s.facilities.join(', ')}`);
            const yearRange = document.getElementById('yearRangeFilter')?.value;
            const reportType = document.getElementById('reportTypeFilter')?.value;
            const chartType = document.getElementById('chartTypeFilter')?.value;
            if (yearRange && yearRange !== 'all') parts.push(`Year: ${yearRange}`);
            if (reportType && reportType !== 'all') parts.push(`Report: ${reportType}`);
            if (chartType && chartType !== 'line') parts.push(`Chart: ${chartType}`);
            return parts.length ? parts.join(' | ') : 'All Data';
        }

        // Load data from API
        async function loadData() {
            showLoading();
            hideError();
            
            try {
                const response = await fetch('https://localhost:7254/api/Stats/GetMonthlyReport');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                // Mapear los datos de la API a la estructura esperada
                const apiData = await response.json();
                currentData = mapApiData(apiData);
                displayData();
                updateLastUpdated();
                
            } catch (error) {
                console.error('Error loading monthly report data:', error);
                showError('Failed to load monthly report data: ' + error.message);
            } finally {
                hideLoading();
            }
        }

        // Mapea los datos de la API a la estructura esperada por el frontend
        function mapApiData(apiData) {
            return apiData.map(item => ({
                month: item.monthYear,
                bookings: item.totalBookings,
                previousMonth: item.previousMonthBookings,
                change: item.percentageDrop,
                dropFlag: item.isFlagged,
                // You can add more fields if needed
            }));
        }

        // Display data
        function displayData() {
            if (!currentData || currentData.length === 0) {
                showError('No data available for monthly report');
                return;
            }

            updateSummaryCards();
            updateDataTable();
            updateTrendChart();
            updatePerformanceChart();
            updateSeasonalChart();
            generateInsights();
            
            // Calcular datos para historial
            const biggestDrop = getBiggestDrop(currentData);
            const totalBookings = currentData.reduce((sum, item) => sum + (item.bookings || 0), 0);
            const dropFlags = currentData.filter(item => item.dropFlag).length;
            addToHistory(getFiltersSummary(), biggestDrop, totalBookings, dropFlags);
            
            document.getElementById('dataContainer').classList.remove('d-none');
        }

        // Update summary cards
        function updateSummaryCards() {
            const totalBookings = currentData.reduce((sum, item) => sum + (item.bookings || 0), 0);
            const avgBookings = totalBookings / currentData.length;
            const dropFlags = currentData.filter(item => item.dropFlag).length;
            
            // Calculate growth rate
            const sortedData = [...currentData].sort((a, b) => new Date(a.month) - new Date(b.month));
            const firstMonth = sortedData[0]?.bookings || 0;
            const lastMonth = sortedData[sortedData.length - 1]?.bookings || 0;
            const growthRate = firstMonth > 0 ? ((lastMonth - firstMonth) / firstMonth) * 100 : 0;

            document.getElementById('totalBookings').textContent = totalBookings.toLocaleString();
            document.getElementById('avgBookings').textContent = Math.round(avgBookings).toLocaleString();
            document.getElementById('dropFlags').textContent = dropFlags;
            document.getElementById('growthRate').textContent = `${growthRate.toFixed(1)}%`;
        }

        // Update data table
        function updateDataTable() {
            const tbody = document.getElementById('dataTableBody');
            tbody.innerHTML = '';
            
            currentData.forEach(item => {
                const row = document.createElement('tr');
                const change = item.change || 0;
                const changeIndicator = getChangeIndicator(change);
                const dropFlagBadge = item.dropFlag ? '<span class="badge bg-danger">Drop Flag</span>' : '<span class="badge bg-success">Normal</span>';
                const trend = getTrendIndicator(item.trend || 0);
                
                row.innerHTML = `
                    <td><strong>${formatMonth(item.month)}</strong></td>
                    <td>${(item.bookings || 0).toLocaleString()}</td>
                    <td>${(item.previousMonth || 0).toLocaleString()}</td>
                    <td>${changeIndicator}</td>
                    <td>${dropFlagBadge}</td>
                    <td>${trend}</td>
                    <td>
                        <div class="btn-group btn-group-sm" role="group">
                            <button class="btn btn-outline-primary" onclick="viewMonthDetails('${item.month}')" title="View Details">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn btn-outline-info" onclick="exportMonthData('${item.month}')" title="Export Data">
                                <i class="bi bi-download"></i>
                            </button>
                            <button class="btn btn-outline-warning" onclick="generateReport('${item.month}')" title="Generate Report">
                                <i class="bi bi-file-earmark-text"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Update trend chart
        function updateTrendChart() {
            if (trendChart) {
                trendChart.destroy();
            }

            const ctx = document.getElementById('monthlyTrendChart').getContext('2d');
            const chartType = document.getElementById('chartTypeFilter').value;
            
            const sortedData = [...currentData].sort((a, b) => new Date(a.month) - new Date(b.month));
            const labels = sortedData.map(item => formatMonth(item.month));
            const bookings = sortedData.map(item => item.bookings || 0);
            const previousMonth = sortedData.map(item => item.previousMonth || 0);

            trendChart = new Chart(ctx, {
                type: chartType,
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Current Month',
                            data: bookings,
                            borderColor: '#36A2EB',
                            backgroundColor: 'rgba(54, 162, 235, 0.1)',
                            borderWidth: 2,
                            fill: chartType === 'area'
                        },
                        {
                            label: 'Previous Month',
                            data: previousMonth,
                            borderColor: '#FF6384',
                            backgroundColor: 'rgba(255, 99, 132, 0.1)',
                            borderWidth: 2,
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Monthly Booking Trends'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Update performance chart
        function updatePerformanceChart() {
            if (performanceChart) {
                performanceChart.destroy();
            }

            const ctx = document.getElementById('performanceChart').getContext('2d');
            const sortedData = [...currentData].sort((a, b) => new Date(a.month) - new Date(b.month));
            const labels = sortedData.map(item => formatMonth(item.month));
            const performance = sortedData.map(item => {
                const change = item.change || 0;
                return change > 0 ? 100 + change : 100 + change;
            });

            performanceChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Performance Index',
                        data: performance,
                        borderColor: '#4BC0C0',
                        backgroundColor: 'rgba(75, 192, 192, 0.1)',
                        borderWidth: 2,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            suggestedMin: 80,
                            suggestedMax: 120
                        }
                    }
                }
            });
        }

        // Update seasonal chart
        function updateSeasonalChart() {
            if (seasonalChart) {
                seasonalChart.destroy();
            }

            const ctx = document.getElementById('seasonalChart').getContext('2d');
            const sortedData = [...currentData].sort((a, b) => new Date(a.month) - new Date(b.month));
            const labels = sortedData.map(item => formatMonth(item.month));
            const bookings = sortedData.map(item => item.bookings || 0);

            seasonalChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Bookings',
                        data: bookings,
                        backgroundColor: [
                            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
                            '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF',
                            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'
                        ],
                        borderColor: [
                            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
                            '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF',
                            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Generate insights
        function generateInsights() {
            const insightsContainer = document.getElementById('insightsContainer');
            const insights = [];

            // Find best and worst performing months
            const sortedByBookings = [...currentData].sort((a, b) => (b.bookings || 0) - (a.bookings || 0));
            const bestMonth = sortedByBookings[0];
            const worstMonth = sortedByBookings[sortedByBookings.length - 1];

            insights.push(`
                <div class="alert alert-success">
                    <i class="bi bi-trophy me-2"></i>
                    <strong>Best Performing Month:</strong> ${formatMonth(bestMonth.month)} with ${bestMonth.bookings} bookings. 
                    Consider replicating successful strategies from this period.
                </div>
            `);

            insights.push(`
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Growth Opportunity:</strong> ${formatMonth(worstMonth.month)} had the lowest bookings (${worstMonth.bookings}). 
                    Implement targeted marketing campaigns for this period.
                </div>
            `);

            // Analyze drop flags
            const dropFlagMonths = currentData.filter(item => item.dropFlag);
            if (dropFlagMonths.length > 0) {
                insights.push(`
                    <div class="alert alert-danger">
                        <i class="bi bi-flag me-2"></i>
                        <strong>Drop Flags Detected:</strong> ${dropFlagMonths.length} month(s) show concerning trends. 
                        Review operational factors and market conditions for these periods.
                    </div>
                `);
            }

            // Calculate average growth
            const avgChange = currentData.reduce((sum, item) => sum + (item.change || 0), 0) / currentData.length;
            if (avgChange > 5) {
                insights.push(`
                    <div class="alert alert-info">
                        <i class="bi bi-graph-up-arrow me-2"></i>
                        <strong>Strong Growth Trend:</strong> Average monthly growth is ${avgChange.toFixed(1)}%. 
                        The business is expanding well - consider scaling operations.
                    </div>
                `);
            } else if (avgChange < -5) {
                insights.push(`
                    <div class="alert alert-warning">
                        <i class="bi bi-graph-down-arrow me-2"></i>
                        <strong>Declining Trend:</strong> Average monthly decline is ${Math.abs(avgChange).toFixed(1)}%. 
                        Immediate action required to reverse the trend.
                    </div>
                `);
            }

            insightsContainer.innerHTML = insights.join('');
        }

        // Sort table
        function sortTable(column) {
            if (sortColumn === column) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortColumn = column;
                sortDirection = 'asc';
            }
            
            currentData.sort((a, b) => {
                let aVal = a[column] || '';
                let bVal = b[column] || '';
                
                if (column === 'month') {
                    aVal = new Date(aVal);
                    bVal = new Date(bVal);
                } else {
                    aVal = parseFloat(aVal) || 0;
                    bVal = parseFloat(bVal) || 0;
                }
                
                if (sortDirection === 'asc') {
                    return aVal > bVal ? 1 : -1;
                } else {
                    return aVal < bVal ? 1 : -1;
                }
            });
            
            updateDataTable();
        }

        // Export data
        function exportData() {
            if (!currentData || currentData.length === 0) {
                alert('No data to export');
                return;
            }
            
            const csvContent = "data:text/csv;charset=utf-8," 
                + "Month,Bookings,Previous Month,Change,Drop Flag\n"
                + currentData.map(item => 
                    `"${formatMonth(item.month)}","${item.bookings || 0}","${item.previousMonth || 0}","${item.change || 0}","${item.dropFlag ? 'Yes' : 'No'}"`
                ).join("\n");
            
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "monthly_report.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // View month details
        function viewMonthDetails(month) {
            alert(`Detailed analysis for ${formatMonth(month)}\n\nThis would show comprehensive statistics and breakdown for this specific month.`);
        }

        // Export month data
        function exportMonthData(month) {
            const monthData = currentData.find(item => item.month === month);
            if (monthData) {
                const csvContent = "data:text/csv;charset=utf-8," 
                    + "Metric,Value\n"
                    + `"Month","${formatMonth(monthData.month)}"\n`
                    + `"Bookings","${monthData.bookings || 0}"\n`
                    + `"Previous Month","${monthData.previousMonth || 0}"\n`
                    + `"Change","${monthData.change || 0}"\n`
                    + `"Drop Flag","${monthData.dropFlag ? 'Yes' : 'No'}"\n`;
                
                const encodedUri = encodeURI(csvContent);
                const link = document.createElement("a");
                link.setAttribute("href", encodedUri);
                link.setAttribute("download", `${formatMonth(month)}_data.csv`);
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }

        // Generate report
        function generateReport(month) {
            alert(`Generate detailed report for ${formatMonth(month)}\n\nThis would create a comprehensive PDF report with charts and analysis.`);
        }

        // Toggle advanced filters
        function toggleAdvancedFilters() {
            const advancedSection = document.querySelector('.row.g-3:nth-child(2)');
            advancedSection.style.display = advancedSection.style.display === 'none' ? 'flex' : 'none';
        }

        // Get change indicator
        function getChangeIndicator(change) {
            if (change > 0) {
                return `<span class="text-success"><i class="bi bi-arrow-up"></i> +${change.toFixed(1)}%</span>`;
            } else if (change < 0) {
                return `<span class="text-danger"><i class="bi bi-arrow-down"></i> ${change.toFixed(1)}%</span>`;
            } else {
                return `<span class="text-muted"><i class="bi bi-dash"></i> 0%</span>`;
            }
        }

        // Get trend indicator
        function getTrendIndicator(trend) {
            if (trend > 0) {
                return '<span class="text-success"><i class="bi bi-arrow-up"></i> +' + trend.toFixed(1) + '%</span>';
            } else if (trend < 0) {
                return '<span class="text-danger"><i class="bi bi-arrow-down"></i> ' + trend.toFixed(1) + '%</span>';
            } else {
                return '<span class="text-muted"><i class="bi bi-dash"></i> 0%</span>';
            }
        }

        // Format month
        function formatMonth(monthString) {
            const date = new Date(monthString);
            return monthNames[date.getMonth()] + ' ' + date.getFullYear();
        }

        // Utility functions
        function showLoading() {
            document.getElementById('loadingSpinner').classList.remove('d-none');
            document.getElementById('dataContainer').classList.add('d-none');
        }

        function hideLoading() {
            document.getElementById('loadingSpinner').classList.add('d-none');
        }

        function showError(message) {
            document.getElementById('errorText').textContent = message;
            document.getElementById('errorMessage').classList.remove('d-none');
        }

        function hideError() {
            document.getElementById('errorMessage').classList.add('d-none');
        }

        function updateLastUpdated() {
            document.getElementById('lastUpdated').textContent = new Date().toLocaleString();
        }

        function addToHistory(filtersSummary, biggestDrop, totalBookings, dropFlags) {
            const now = new Date().toLocaleString();
            queryHistory.unshift({
                date: now,
                filters: filtersSummary,
                biggestDrop: biggestDrop,
                total: totalBookings,
                dropFlags: dropFlags
            });
            renderHistory();
        }

        function renderHistory() {
            const tbody = document.getElementById('historyTableBody');
            tbody.innerHTML = '';
            queryHistory.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.date}</td>
                    <td>${item.filters}</td>
                    <td>${item.biggestDrop}</td>
                    <td>${item.total}</td>
                    <td>${item.dropFlags}</td>
                `;
                tbody.appendChild(row);
            });
        }

        function clearHistory() {
            queryHistory = [];
            renderHistory();
        }

        function getBiggestDrop(data) {
            if (!data || !data.length) return '-';
            let maxDrop = -Infinity;
            let result = '-';
            data.forEach(item => {
                if (item.dropFlag && item.percentageDrop !== undefined && item.percentageDrop < maxDrop) {
                    maxDrop = item.percentageDrop;
                    result = `${item.facilityName} (${item.monthYear}, ${item.percentageDrop.toFixed(1)}%)`;
                }
            });
            return result;
        }
    </script>
} 