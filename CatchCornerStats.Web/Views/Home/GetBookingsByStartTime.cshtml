@{
    ViewData["Title"] = "Bookings by Start Time";
}

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center gap-2">
                    <a href="/" class="btn btn-outline-secondary btn-sm me-2" title="Volver al inicio">
                        <i class="bi bi-arrow-left"></i>
                    </a>
                    <div>
                        <h1 class="h2 mb-1 fw-bold text-primary">
                            <i class="bi bi-clock-history me-2"></i>Bookings by Start Time
                        </h1>
                        <p class="text-muted mb-0">See which start times are most popular. Analyze by sport, city, rink size, facility, month, and day of week.</p>
                    </div>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-primary" onclick="loadData()">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-funnel me-2"></i>Filters
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3 mb-2">
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Sports</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="sportsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="sportsDropdownLabel">All Sports</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="sportsDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'sportsOptions',type:'sports',labelId:'sportsDropdownLabel',defaultLabel:'All Sports'})">
                                    <div id="sportsOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Cities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="citiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="citiesDropdownLabel">All Cities</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="citiesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'citiesOptions',type:'cities',labelId:'citiesDropdownLabel',defaultLabel:'All Cities'})">
                                    <div id="citiesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Rink Sizes</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="rinkSizesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="rinkSizesDropdownLabel">All Sizes</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="rinkSizesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'rinkSizesOptions',type:'rinkSizes',labelId:'rinkSizesDropdownLabel',defaultLabel:'All Sizes'})">
                                    <div id="rinkSizesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Facilities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="facilitiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="facilitiesDropdownLabel">All Facilities</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="facilitiesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'facilitiesOptions',type:'facilities',labelId:'facilitiesDropdownLabel',defaultLabel:'All Facilities'})">
                                    <div id="facilitiesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label fw-semibold">Month</label>
                            <select class="form-select" id="monthFilter">
                                <option value="">All Months</option>
                                <option value="1">January</option>
                                <option value="2">February</option>
                                <option value="3">March</option>
                                <option value="4">April</option>
                                <option value="5">May</option>
                                <option value="6">June</option>
                                <option value="7">July</option>
                                <option value="8">August</option>
                                <option value="9">September</option>
                                <option value="10">October</option>
                                <option value="11">November</option>
                                <option value="12">December</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label fw-semibold">Day of Week</label>
                            <select class="form-select" id="dayOfWeekFilter">
                                <option value="">All Days</option>
                                <option value="0">Sunday</option>
                                <option value="1">Monday</option>
                                <option value="2">Tuesday</option>
                                <option value="3">Wednesday</option>
                                <option value="4">Thursday</option>
                                <option value="5">Friday</option>
                                <option value="6">Saturday</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Created Date (From)</label>
                            <input type="date" class="form-control" id="createdDateFrom">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Created Date (To)</label>
                            <input type="date" class="form-control" id="createdDateTo">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Happening Date (From)</label>
                            <input type="date" class="form-control" id="happeningDateFrom">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Happening Date (To)</label>
                            <input type="date" class="form-control" id="happeningDateTo">
                        </div>
                    </div>
                    <div class="d-flex gap-2 mb-2">
                        <button class="btn btn-primary px-4 shadow-sm" onclick="applyFilters()">
                            <i class="bi bi-funnel me-2"></i>Apply Filters
                        </button>
                        <button class="btn btn-outline-secondary px-4 shadow-sm" onclick="clearFilters()">
                            <i class="bi bi-x-circle me-2"></i>Clear Filters
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-clock-history me-2"></i>Results
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Loading -->
                    <div id="loading" class="text-center d-none py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3">Loading data...</p>
                    </div>

                    <!-- Error -->
                    <div id="error" class="alert alert-danger d-none" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <span id="errorText">An error occurred</span>
                    </div>

                    <!-- Data -->
                    <div id="data" class="d-none">
                        <!-- Summary Cards -->
                        <div class="row mb-4">
                            <div class="col-md-4">
                                <div class="card bg-success text-white">
                                    <div class="card-body text-center">
                                        <h3 class="mb-0" id="totalBookings">0</h3>
                                        <p class="mb-0">Total Bookings</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card bg-primary text-white">
                                    <div class="card-body text-center">
                                        <h3 class="mb-0" id="peakTime">-</h3>
                                        <p class="mb-0">Peak Time</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card bg-warning text-white">
                                    <div class="card-body text-center">
                                        <h3 class="mb-0" id="quietTime">-</h3>
                                        <p class="mb-0">Quietest Time</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Chart -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="card-title mb-0">Start Time Distribution</h6>
                                    </div>
                                    <div class="card-body">
                                        <canvas id="startTimeChart" height="100"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Results Table -->
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th>Start Time <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Hora de inicio de las reservas."></i></th>
                                        <th>Bookings Count <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Cantidad de reservas en esta hora."></i></th>
                                        <th>Percentage <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Porcentaje del total de reservas."></i></th>
                                        <th>Status <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Clasificación: High (≥15%), Medium (8-14%), Low (<8%)"></i></th>
                                    </tr>
                                </thead>
                                <tbody id="resultsTable">
                                    <!-- Data will be populated here -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Legend -->
                        <div class="mt-3">
                            <small class="text-muted">
                                <strong>Status:</strong>
                                <span class="text-success">High</span> (≥15%),
                                <span class="text-warning">Medium</span> (8-14%),
                                <span class="text-danger">Low</span> (<8%)
                            </small>
                        </div>

                        <!-- Last Updated -->
                        <div class="mt-3 text-muted small">
                            Last updated: <span id="lastUpdated">Never</span>
                        </div>

                        <!-- Historial de Consultas -->
                        <div class="mt-4">
                            <h6 class="fw-bold mb-2">
                                <i class="bi bi-clock-history me-2"></i>Historial de Consultas
                                <button class="btn btn-sm btn-outline-danger ms-2" onclick="clearHistory()" title="Limpiar historial">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </h6>
                            <div class="table-responsive">
                                <table class="table table-sm table-bordered align-middle">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Fecha/Hora</th>
                                            <th>Filtros</th>
                                            <th>Peak Time</th>
                                            <th>Quietest Time</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody id="historyTableBody">
                                        <!-- Historial se llena por JS -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentData = null;
        let chart = null;
        let filtersReady = false;
        
        // Función para inicializar la vista
        async function initializeView() {
            try {
                ConfigHelpers.log('Iniciando vista GetBookingsByStartTime...');
                
                // Verificar que SharedFilters esté disponible
                if (typeof initializeSharedFilters !== 'function') {
                    ConfigHelpers.logError('SharedFilters not available - initializeSharedFilters function not found');
                    console.error('Available global functions:', Object.keys(window).filter(key => typeof window[key] === 'function'));
                    return;
                }
                
                ConfigHelpers.log('initializeSharedFilters function found, calling it...');
                
                // Inicializar filtros compartidos
                await initializeSharedFilters();
                filtersReady = true;
                ConfigHelpers.log('Filtros inicializados correctamente');
                
                // Cargar datos iniciales
                await loadDataWithoutFilters();
                
            } catch (error) {
                ConfigHelpers.logError('Error inicializando vista:', error);
                showError('Error inicializando la vista: ' + error.message);
            }
        }
        
        // Cargar datos sin filtros (carga inicial rápida)
        async function loadDataWithoutFilters() {
            try {
                showLoading();
                hideError();
                
                // Usar las utilidades de API optimizadas
                const data = await API_UTILS.loadStatsData('bookingsByStartTime');
                displayData(data, 'Carga inicial sin filtros');
                
            } catch (error) {
                ConfigHelpers.logError('Error cargando datos iniciales:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadDataWithoutFilters');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }
        
        // Inicializar cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', initializeView);
        
        // También inicializar si el DOM ya está listo (para navegación SPA)
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeView);
        } else {
            initializeView();
        }

        // Agregar listener para cambios de filtros (recarga automática)
        document.addEventListener('DOMContentLoaded', function() {
            // Escuchar cambios en los filtros de fecha
            const dateInputs = ['createdDateFrom', 'createdDateTo', 'happeningDateFrom', 'happeningDateTo'];
            dateInputs.forEach(inputId => {
                const element = document.getElementById(inputId);
                if (element) {
                    element.addEventListener('change', () => {
                        console.log(`📅 Date filter changed: ${inputId}`);
                        loadData();
                    });
                }
            });
            
            // Escuchar cambios en los filtros de mes y día
            const selectInputs = ['monthFilter', 'dayOfWeekFilter'];
            selectInputs.forEach(inputId => {
                const element = document.getElementById(inputId);
                if (element) {
                    element.addEventListener('change', () => {
                        console.log(`📅 Select filter changed: ${inputId}`);
                        loadData();
                    });
                }
            });
        });

        // Cargar datos desde la API usando los filtros globales
        async function loadData() {
            console.log('🔄 loadData() called');
            
            if (!filtersReady) {
                ConfigHelpers.log('loadData() abortado: filtros no listos');
                return;
            }
            
            try {
                showLoading();
                hideError();
                
                console.log('🔍 Calling buildApiParameters()...');
                const params = buildApiParameters();
                console.log('📤 buildApiParameters() returned:', params);
                
                // Usar las utilidades de API optimizadas
                const data = await API_UTILS.loadStatsData('bookingsByStartTime', params);
                displayData(data, 'Datos con filtros aplicados');
                
            } catch (error) {
                ConfigHelpers.logError('Error cargando datos:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadData');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }

        // Hacer loadData disponible globalmente
        window.loadData = loadData;

        // Botón para aplicar filtros (solo recarga datos)
        function applyFilters() {
            ConfigHelpers.log('Aplicando filtros...');
            loadData();
        }

        // Botón para limpiar filtros globales y recargar datos
        function clearFilters() {
            ConfigHelpers.log('Limpiando filtros...');
            clearAllFilters();
            loadData();
        }

        // Build API parameters from shared filters
        function buildApiParameters() {
            const params = new URLSearchParams();
            
            // Get values from shared filters
            const sports = getSelectedDropdownValues('sportsOptions');
            const cities = getSelectedDropdownValues('citiesOptions');
            const rinkSizes = getSelectedDropdownValues('rinkSizesOptions');
            const facilities = getSelectedDropdownValues('facilitiesOptions');
            
            // Get additional filters
            const month = document.getElementById('monthFilter').value;
            const dayOfWeek = document.getElementById('dayOfWeekFilter').value;
            const createdDateFrom = document.getElementById('createdDateFrom').value;
            const createdDateTo = document.getElementById('createdDateTo').value;
            const happeningDateFrom = document.getElementById('happeningDateFrom').value;
            const happeningDateTo = document.getElementById('happeningDateTo').value;
            
            // Add parameters (using new List<string> format)
            if (sports.length) sports.forEach(sport => params.append('sports', sport));
            if (cities.length) cities.forEach(city => params.append('cities', city));
            if (rinkSizes.length) rinkSizes.forEach(size => params.append('rinkSizes', size));
            if (facilities.length) facilities.forEach(facility => params.append('facilities', facility));
            if (month) params.append('month', month);
            if (dayOfWeek) params.append('dayOfWeek', dayOfWeek);
            if (createdDateFrom) params.append('createdDateFrom', createdDateFrom);
            if (createdDateTo) params.append('createdDateTo', createdDateTo);
            if (happeningDateFrom) params.append('happeningDateFrom', happeningDateFrom);
            if (happeningDateTo) params.append('happeningDateTo', happeningDateTo);
            
            return params;
        }

        // Mostrar datos en la UI
        function displayData(data, source = '') {
            currentData = data;
            ConfigHelpers.log(`Mostrando datos (${source}):`, data);
            
            if (!data || !data.data) {
                showError('No data available');
                return;
            }
            
            const labels = Object.keys(data.data);
            const values = Object.values(data.data);
            const totalBookings = data.totalBookings || values.reduce((sum, val) => sum + val, 0);
            
            // Find peak and quiet times
            let maxIndex = 0, minIndex = 0;
            values.forEach((value, index) => {
                if (value > values[maxIndex]) maxIndex = index;
                if (value < values[minIndex]) minIndex = index;
            });
            
            // Update summary cards
            document.getElementById('totalBookings').textContent = totalBookings.toLocaleString();
            document.getElementById('peakTime').textContent = labels[maxIndex] || 'N/A';
            document.getElementById('quietTime').textContent = labels[minIndex] || 'N/A';
            
            // Update results table
            const tbody = document.getElementById('resultsTable');
            tbody.innerHTML = '';
            
            labels.forEach((label, index) => {
                const percentage = totalBookings > 0 ? ((values[index] / totalBookings) * 100).toFixed(1) : '0.0';
                const status = getTimeStatus(percentage);
                const statusClass = status === 'High' ? 'text-success' : status === 'Medium' ? 'text-warning' : 'text-danger';
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${label}</td>
                    <td>${values[index].toLocaleString()}</td>
                    <td>${percentage}%</td>
                    <td><span class="${statusClass}">${status}</span></td>
                `;
                tbody.appendChild(row);
            });
            
            // Create chart
            createChart(labels, values);
            
            // Agregar al historial
            if (labels.length > 0) {
                const peakTime = labels[maxIndex];
                const peakPct = ((values[maxIndex] / totalBookings) * 100).toFixed(1);
                const quietTime = labels[minIndex];
                const quietPct = ((values[minIndex] / totalBookings) * 100).toFixed(1);
                addToHistory(getFiltersSummary(), peakTime, peakPct, quietTime, quietPct, totalBookings);
            }
            
            document.getElementById('data').classList.remove('d-none');
            updateLastUpdated();
        }

        // Create chart
        function createChart(labels, values) {
            const ctx = document.getElementById('startTimeChart');
            if (!ctx) return;
            
            if (chart) {
                chart.destroy();
            }
            
            const timeLabels = labels;
            
            chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: timeLabels,
                    datasets: [{
                        label: 'Bookings',
                        data: values,
                        backgroundColor: '#198754',
                        borderColor: '#198754',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Number of Bookings'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Start Time'
                            }
                        }
                    }
                }
            });
        }

        // Format time
        function formatTime(timeString) {
            if (!timeString) return 'N/A';
            try {
                const time = new Date(`2000-01-01T${timeString}`);
                return time.toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: true
                });
            } catch {
                return timeString;
            }
        }

        // Get time status
        function getTimeStatus(percentage) {
            const percent = parseFloat(percentage);
            if (percent >= 15) return 'High';
            if (percent >= 8) return 'Medium';
            return 'Low';
        }
        
        function showLoading() {
            document.getElementById('loading').classList.remove('d-none');
            document.getElementById('data').classList.add('d-none');
            document.getElementById('error').classList.add('d-none');
        }
        
        function hideLoading() {
            document.getElementById('loading').classList.add('d-none');
        }
        
        function showError(message) {
            document.getElementById('errorText').textContent = message;
            document.getElementById('error').classList.remove('d-none');
            document.getElementById('data').classList.add('d-none');
        }
        
        function hideError() {
            document.getElementById('error').classList.add('d-none');
        }

        // Update last updated timestamp
        function updateLastUpdated() {
            document.getElementById('lastUpdated').textContent = new Date().toLocaleString();
        }

        // Get filters summary for history
        function getFiltersSummary() {
            const sports = getSelectedDropdownValues('sportsOptions');
            const cities = getSelectedDropdownValues('citiesOptions');
            const rinkSizes = getSelectedDropdownValues('rinkSizesOptions');
            const facilities = getSelectedDropdownValues('facilitiesOptions');
            const month = document.getElementById('monthFilter').value;
            const dayOfWeek = document.getElementById('dayOfWeekFilter').value;
            const createdDateFrom = document.getElementById('createdDateFrom').value;
            const createdDateTo = document.getElementById('createdDateTo').value;
            const happeningDateFrom = document.getElementById('happeningDateFrom').value;
            const happeningDateTo = document.getElementById('happeningDateTo').value;
            
            const parts = [];
            if (sports.length) parts.push(`Sports: ${sports.join(', ')}`);
            if (cities.length) parts.push(`Cities: ${cities.join(', ')}`);
            if (rinkSizes.length) parts.push(`Sizes: ${rinkSizes.join(', ')}`);
            if (facilities.length) parts.push(`Facilities: ${facilities.join(', ')}`);
            if (month) parts.push(`Month: ${month}`);
            if (dayOfWeek) parts.push(`Day: ${dayOfWeek}`);
            if (createdDateFrom) parts.push(`Created From: ${createdDateFrom}`);
            if (createdDateTo) parts.push(`Created To: ${createdDateTo}`);
            if (happeningDateFrom) parts.push(`Happening From: ${happeningDateFrom}`);
            if (happeningDateTo) parts.push(`Happening To: ${happeningDateTo}`);
            return parts.length ? parts.join(' | ') : 'All Data';
        }

        // Export data
        function exportData() {
            if (!currentData) {
                alert('No data to export');
                return;
            }
            
            const labels = Object.keys(currentData.data);
            const values = Object.values(currentData.data);
            const totalBookings = values.reduce((sum, val) => sum + val, 0);
            
            const csvContent = "data:text/csv;charset=utf-8," 
                + "Start Time,Bookings Count,Percentage\n"
                + labels.map((label, index) => {
                    const percentage = ((values[index] / totalBookings) * 100).toFixed(1);
                    return `${label},${values[index]},${percentage}%`;
                }).join("\n");
            
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "bookings_by_start_time.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Utility functions
        function getSelectedDropdownValues(containerId) {
            const checkboxes = document.querySelectorAll(`#${containerId} input[type="checkbox"]:checked`);
            return Array.from(checkboxes).map(cb => cb.value);
        }
        function clearDropdownSelections(containerId, labelId, defaultLabel) {
            const checkboxes = document.querySelectorAll(`#${containerId} input[type="checkbox"]`);
            checkboxes.forEach(cb => cb.checked = false);
            document.getElementById(labelId).textContent = defaultLabel;
        }
        function filterDropdownOptions(input, containerId) {
            const filter = input.value.toLowerCase();
            const options = document.querySelectorAll(`#${containerId} .form-check`);
            options.forEach(option => {
                const text = option.textContent.toLowerCase();
                option.style.display = text.includes(filter) ? 'block' : 'none';
            });
        }
        function addToHistory(filters, peakTime, peakPct, quietTime, quietPct, totalBookings) {
            const entry = {
                date: new Date().toLocaleString(),
                filters: filters,
                peakTime: peakTime,
                peakPct: peakPct,
                quietTime: quietTime,
                quietPct: quietPct,
                totalBookings: totalBookings
            };
            
            let history = JSON.parse(localStorage.getItem('startTimeHistory') || '[]');
            history.unshift(entry);
            if (history.length > 20) history = history.slice(0, 20);
            localStorage.setItem('startTimeHistory', JSON.stringify(history));
            renderHistory();
        }
        function renderHistory() {
            const tbody = document.getElementById('historyTableBody');
            if (!tbody) return;
            
            let history = JSON.parse(localStorage.getItem('startTimeHistory') || '[]');
            tbody.innerHTML = '';
            
            if (history.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">No hay historial</td></tr>';
                return;
            }
            
            history.forEach(item => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${item.date}</td>
                    <td>${item.filters}</td>
                    <td>${item.peakTime} (${item.peakPct}%)</td>
                    <td>${item.quietTime} (${item.quietPct}%)</td>
                    <td>${item.totalBookings.toLocaleString()}</td>
                `;
                tbody.appendChild(tr);
            });
        }
        function clearHistory() {
            localStorage.removeItem('startTimeHistory');
            renderHistory();
        }
        function clearAllFilters() {
            clearDropdownSelections('sportsOptions', 'sportsDropdownLabel', 'All Sports');
            clearDropdownSelections('citiesOptions', 'citiesDropdownLabel', 'All Cities');
            clearDropdownSelections('rinkSizesOptions', 'rinkSizesDropdownLabel', 'All Sizes');
            clearDropdownSelections('facilitiesOptions', 'facilitiesDropdownLabel', 'All Facilities');
            document.getElementById('monthFilter').value = '';
            document.getElementById('dayOfWeekFilter').value = '';
            document.getElementById('createdDateFrom').value = '';
            document.getElementById('createdDateTo').value = '';
            document.getElementById('happeningDateFrom').value = '';
            document.getElementById('happeningDateTo').value = '';
        }

        // Initialize tooltips and history
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function(tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
            
            // Render history on page load
            renderHistory();
        });
    </script>
} 