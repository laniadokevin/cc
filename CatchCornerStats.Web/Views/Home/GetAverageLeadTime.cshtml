@{
    ViewData["Title"] = "Average Lead Time";
}

<div class="container-fluid py-4">
    <!-- Header --> 
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center gap-2">
                    <a href="/" class="btn btn-outline-secondary btn-sm me-2" title="Volver al inicio">
                        <i class="bi bi-arrow-left"></i>
                    </a>
                    <div>
                        <h1 class="h2 mb-1 fw-bold text-primary">
                            <i class="bi bi-clock-history me-2"></i>Average Lead Time
                        </h1>
                        <p class="text-muted mb-0">Average days in advance that bookings are made</p>
                    </div>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-primary" onclick="loadData()">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-funnel me-2"></i>Filters
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3 mb-2">
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Sports</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="sportsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="sportsDropdownLabel">All Sports</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="sportsDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'sportsOptions',type:'sports',labelId:'sportsDropdownLabel',defaultLabel:'All Sports'})">
                                    <div id="sportsOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Cities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="citiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="citiesDropdownLabel">All Cities</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="citiesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'citiesOptions',type:'cities',labelId:'citiesDropdownLabel',defaultLabel:'All Cities'})">
                                    <div id="citiesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Rink Sizes</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="rinkSizesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="rinkSizesDropdownLabel">All Sizes</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="rinkSizesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'rinkSizesOptions',type:'rinkSizes',labelId:'rinkSizesDropdownLabel',defaultLabel:'All Sizes'})">
                                    <div id="rinkSizesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Facilities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="facilitiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="facilitiesDropdownLabel">All Facilities</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="facilitiesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'facilitiesOptions',type:'facilities',labelId:'facilitiesDropdownLabel',defaultLabel:'All Facilities'})">
                                    <div id="facilitiesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Created Date (From)</label>
                            <input type="date" class="form-control" id="createdDateFrom">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Created Date (To)</label>
                            <input type="date" class="form-control" id="createdDateTo">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Happening Date (From)</label>
                            <input type="date" class="form-control" id="happeningDateFrom">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Happening Date (To)</label>
                            <input type="date" class="form-control" id="happeningDateTo">
                        </div>
                    </div>
                    <div class="d-flex gap-2 mb-2">
                        <button class="btn btn-primary px-4 shadow-sm" onclick="applyFilters()">
                            <i class="bi bi-funnel me-2"></i>Apply Filters
                        </button>
                        <button class="btn btn-outline-secondary px-4 shadow-sm" onclick="clearFilters()">
                            <i class="bi bi-x-circle me-2"></i>Clear Filters
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-clock me-2"></i>Results
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Loading -->
                    <div id="loading" class="text-center d-none py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3">Loading data...</p>
                    </div>

                    <!-- Error -->
                    <div id="error" class="alert alert-danger d-none" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <span id="errorText">An error occurred</span>
                    </div>

                    <!-- Data -->
                    <div id="data" class="d-none">
                        <!-- Summary Cards -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="card bg-primary text-white">
                                    <div class="card-body text-center">
                                        <h3 class="mb-0" id="averageDays">0</h3>
                                        <p class="mb-0">Average Lead Time (Days)</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card bg-success text-white">
                                    <div class="card-body text-center">
                                        <h3 class="mb-0" id="totalBookings">0</h3>
                                        <p class="mb-0">Total Bookings</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Results Table -->
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th>Filters <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Resumen de los filtros aplicados para esta consulta."></i></th>
                                        <th>Average Lead Time (Days) <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Average days between booking creation and usage date."></i></th>
                                        <th>Total Bookings <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Cantidad total de reservas que cumplen los filtros."></i></th>
                                        <th>Category <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Lead time classification: Short (≤1 day), Medium (2-7 days), Long (>7 days)"></i></th>
                                    </tr>
                                </thead>
                                <tbody id="resultsTable">
                                    <!-- Data will be populated here -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Legend -->
                        <div class="mt-3">
                            <small class="text-muted">
                                <strong>Categories:</strong>
                                <span class="text-success">Short</span> (≤1 day),
                                <span class="text-warning">Medium</span> (2-7 days),
                                <span class="text-danger">Long</span> (>7 days)
                            </small>
                        </div>

                        <!-- Last Updated -->
                        <div class="mt-3 text-muted small">
                            Last updated: <span id="lastUpdated">Never</span>
                        </div>

                        <!-- Historial de Consultas -->
                        <div class="mt-4">
                            <h6 class="fw-bold mb-2"><i class="bi bi-clock-history me-2"></i>Historial de Consultas</h6>
                            <div class="table-responsive">
                                <table class="table table-sm table-bordered align-middle">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Fecha/Hora</th>
                                            <th>Filtros</th>
                                            <th>Lead Time</th>
                                            <th>Bookings</th>
                                        </tr>
                                    </thead>
                                    <tbody id="historyTable">
                                        <!-- Historial se llena por JS -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentData = null;
        let filtersReady = false;
        let initialDataLoaded = false;
        
        // Función para inicializar la vista
        async function initializeView() {
            try {
                ConfigHelpers.log('Iniciando vista GetAverageLeadTime...');
                
                // Verificar que SharedFilters esté disponible
                if (typeof initializeSharedFilters !== 'function') {
                    ConfigHelpers.logError('SharedFilters not available');
                    return;
                }
                
                // CARGAR DATOS INMEDIATAMENTE (sin filtros)
                ConfigHelpers.log('Cargando datos iniciales sin filtros...');
                await loadDataWithoutFilters();
                initialDataLoaded = true;
                
                // INICIALIZAR FILTROS EN PARALELO (sin bloquear)
                ConfigHelpers.log('Inicializando filtros en paralelo...');
                initializeFiltersAsync();
                
            } catch (error) {
                ConfigHelpers.logError('Error inicializando vista:', error);
                showError('Error inicializando la vista: ' + error.message);
            }
        }
        
        // Inicializar filtros de forma asíncrona
        async function initializeFiltersAsync() {
            try {
                // Inicializar filtros compartidos
                await initializeSharedFilters();
                ConfigHelpers.log('Filtros compartidos inicializados');
                
                // Verificar que los elementos del DOM estén listos
                const requiredElements = ['sportsOptions', 'citiesOptions', 'rinkSizesOptions', 'facilitiesOptions'];
                const missingElements = requiredElements.filter(id => !document.getElementById(id));
                
                if (missingElements.length > 0) {
                    ConfigHelpers.logError('Elementos faltantes:', missingElements);
                    return;
                }
                
                // Inicializar UI de filtros
                if (typeof initializeFilterUI === 'function') {
                    initializeFilterUI();
                    ConfigHelpers.log('Filtros visuales renderizados');
                }
                
                filtersReady = true;
                ConfigHelpers.log('Filtros listos');
                
                // Si ya se cargaron datos iniciales, recargar con filtros
                if (initialDataLoaded) {
                    ConfigHelpers.log('Recargando datos con filtros...');
                    await loadData();
                }
                
                // Configurar listener para cambios de filtros
                addFilterChangeListener(() => {
                    ConfigHelpers.log('Filtros cambiados, recargando datos...');
                    loadData();
                });
                
            } catch (error) {
                ConfigHelpers.logError('Error inicializando filtros:', error);
            }
        }
        
        // Cargar datos sin filtros (carga inicial rápida)
        async function loadDataWithoutFilters() {
            try {
                showLoading();
                hideError();
                
                // Usar las utilidades de API optimizadas
                const data = await API_UTILS.loadStatsData('averageLeadTime');
                displayData(data, 'Carga inicial sin filtros');
                
            } catch (error) {
                ConfigHelpers.logError('Error cargando datos iniciales:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadDataWithoutFilters');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }
        
        // Inicializar cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', initializeView);
        
        // También inicializar si el DOM ya está listo (para navegación SPA)
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeView);
        } else {
            initializeView();
        }

        // Cargar datos desde la API usando los filtros globales
        async function loadData() {
            if (!filtersReady) {
                ConfigHelpers.log('loadData() abortado: filtros no listos');
                return;
            }
            
            try {
                showLoading();
                hideError();
                
                const params = buildApiParameters();
                
                // Usar las utilidades de API optimizadas
                const data = await API_UTILS.loadStatsData('averageLeadTime', params);
                displayData(data, 'Datos con filtros aplicados');
                
            } catch (error) {
                ConfigHelpers.logError('Error cargando datos:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadData');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }

        // Botón para aplicar filtros (solo recarga datos)
        function applyFilters() {
            ConfigHelpers.log('Aplicando filtros...');
            loadData();
        }

        // Botón para limpiar filtros globales y recargar datos
        function clearFilters() {
            ConfigHelpers.log('Limpiando filtros...');
            clearAllFilters();
            loadData();
        }

        // Mostrar datos en la UI
        function displayData(data, source = '') {
            currentData = data;
            ConfigHelpers.log(`Mostrando datos (${source}):`, data);
            
            // Update summary cards
            const averageDays = document.getElementById('averageDays');
            const totalBookings = document.getElementById('totalBookings');
            
            if (averageDays && data.averageLeadTime !== undefined) {
                averageDays.textContent = data.averageLeadTime.toFixed(2);
            }
            
            if (totalBookings && data.totalBookings !== undefined) {
                totalBookings.textContent = formatNumber(data.totalBookings);
            }

            // Update results table
            const tbody = document.getElementById('resultsTable');
            tbody.innerHTML = '';
            
            // Usar el resumen de filtros global
            const filtersSummary = (typeof getFiltersSummary === 'function') ? getFiltersSummary() : 'All Data';
            const row = document.createElement('tr');
            const category = getLeadTimeCategory(data.averageLeadTime);
            const categoryClass = getCategoryClass(data.averageLeadTime);
            
            row.innerHTML = `
                <td>${filtersSummary}</td>
                <td>${data.averageLeadTime ? data.averageLeadTime.toFixed(2) : '0.00'}</td>
                <td>${formatNumber(data.totalBookings || 0)}</td>
                <td><span class="badge ${categoryClass}">${category}</span></td>
            `;
            tbody.appendChild(row);

            document.getElementById('data').classList.remove('d-none');
            document.getElementById('lastUpdated').textContent = new Date().toLocaleString();

            // Guardar en historial (solo si hay datos)
            if (data && data.averageLeadTime !== undefined && data.totalBookings !== undefined) {
                saveHistoryEntry({
                    date: new Date().toLocaleString(),
                    filters: filtersSummary,
                    leadTime: data.averageLeadTime.toFixed(2),
                    bookings: formatNumber(data.totalBookings || 0)
                });
                renderHistory();
            }
        }

        // Categorizar lead time
        function getLeadTimeCategory(avgLeadTime) {
            if (!avgLeadTime || avgLeadTime <= 1) return 'Short';
            if (avgLeadTime <= 7) return 'Medium';
            return 'Long';
        }
        
        function getCategoryClass(avgLeadTime) {
            if (!avgLeadTime || avgLeadTime <= 1) return 'bg-success';
            if (avgLeadTime <= 7) return 'bg-warning';
            return 'bg-danger';
        }
        
        function showLoading() {
            document.getElementById('loading').classList.remove('d-none');
            document.getElementById('data').classList.add('d-none');
            document.getElementById('error').classList.add('d-none');
        }
        
        function hideLoading() {
            document.getElementById('loading').classList.add('d-none');
        }
        
        function showError(message) {
            document.getElementById('errorText').textContent = message;
            document.getElementById('error').classList.remove('d-none');
            document.getElementById('data').classList.add('d-none');
        }
        
        function hideError() {
            document.getElementById('error').classList.add('d-none');
        }
        
        function formatNumber(num) {
            return new Intl.NumberFormat().format(num);
        }

        // Guardar historial en localStorage
        function saveHistoryEntry(entry) {
            let history = JSON.parse(localStorage.getItem('leadTimeHistory') || '[]');
            history.unshift(entry); // Agrega al inicio
            if (history.length > 20) history = history.slice(0, 20); // Max 20 entries
            localStorage.setItem('leadTimeHistory', JSON.stringify(history));
        }

        // Mostrar historial en la tabla
        function renderHistory() {
            const tbody = document.getElementById('historyTable');
            if (!tbody) return;
            let history = JSON.parse(localStorage.getItem('leadTimeHistory') || '[]');
            tbody.innerHTML = '';
            if (history.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">No hay historial</td></tr>';
                return;
            }
            history.forEach(item => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${item.date}</td>
                    <td>${item.filters}</td>
                    <td>${item.leadTime}</td>
                    <td>${item.bookings}</td>
                `;
                tbody.appendChild(tr);
            });
        }

        // Renderizar historial al cargar
        document.addEventListener('DOMContentLoaded', renderHistory);

        // Inicializar tooltips de Bootstrap
        document.addEventListener('DOMContentLoaded', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
} 