@{
    ViewData["Title"] = "Sport Comparison by City";
}

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                <div>
                    <div class="d-flex align-items-center gap-3 mb-2">
                        <a href="@Url.Action("Index", "Home")" class="btn btn-outline-secondary btn-sm">
                            <i class="bi bi-arrow-left me-1"></i>Back
                        </a>
                        <h1 class="h2 mb-0 fw-bold text-info">
                            <i class="bi bi-bar-chart-steps me-2"></i>Sport Comparison by City
                        </h1>
                    </div>
                    <p class="text-muted mb-0">Compare sport orders vs actual results per city. Flags sports that outperform their ranking or have high booking volumes.</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary shadow-sm" onclick="exportData()">
                        <i class="bi bi-download me-2"></i>Export
                    </button>
                    <button class="btn btn-primary shadow-sm" onclick="loadData()">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom-0">
                    <h5 class="card-title mb-0 text-secondary">
                        <i class="bi bi-funnel me-2"></i>Filters
                    </h5>
                </div>
                <div class="card-body pb-2">
                    <div class="row g-3 mb-3">
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Sports</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="sportsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="sportsDropdownLabel">All Sports</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="sportsDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'sportsOptions',type:'sports',labelId:'sportsDropdownLabel',defaultLabel:'All Sports'})">
                                    <div id="sportsOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Cities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="citiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="citiesDropdownLabel">All Cities</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="citiesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'citiesOptions',type:'cities',labelId:'citiesDropdownLabel',defaultLabel:'All Cities'})">
                                    <div id="citiesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Rink Sizes</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="rinkSizesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="rinkSizesDropdownLabel">All Sizes</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="rinkSizesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'rinkSizesOptions',type:'rinkSizes',labelId:'rinkSizesDropdownLabel',defaultLabel:'All Sizes'})">
                                    <div id="rinkSizesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Facilities</label>
                            <div class="dropdown w-100">
                                <button class="btn btn-outline-secondary w-100 text-start dropdown-toggle" type="button" id="facilitiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="facilitiesDropdownLabel">All Facilities</span>
                                </button>
                                <div class="dropdown-menu w-100 p-2" aria-labelledby="facilitiesDropdown" style="max-height: 300px; overflow-y: auto;">
                                    <input type="text" class="form-control mb-2" placeholder="Search..." oninput="if(SharedFilters && SharedFilters.isInitialized) simpleFilterDropdown({containerId:'facilitiesOptions',type:'facilities',labelId:'facilitiesDropdownLabel',defaultLabel:'All Facilities'})">
                                    <div id="facilitiesOptions"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label fw-semibold">Month</label>
                            <select class="form-select" id="monthFilter">
                                <option value="">All Months</option>
                                <option value="1">January</option>
                                <option value="2">February</option>
                                <option value="3">March</option>
                                <option value="4">April</option>
                                <option value="5">May</option>
                                <option value="6">June</option>
                                <option value="7">July</option>
                                <option value="8">August</option>
                                <option value="9">September</option>
                                <option value="10">October</option>
                                <option value="11">November</option>
                                <option value="12">December</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label fw-semibold">Year</label>
                            <select class="form-select" id="yearFilter">
                                <option value="">All Years</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label fw-semibold">Created Date From</label>
                            <input type="date" class="form-control" id="createdDateFrom">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label fw-semibold">Created Date To</label>
                            <input type="date" class="form-control" id="createdDateTo">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label fw-semibold">Happening Date From</label>
                            <input type="date" class="form-control" id="happeningDateFrom">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label fw-semibold">Happening Date To</label>
                            <input type="date" class="form-control" id="happeningDateTo">
                        </div>
                    </div>
                    <div class="d-flex gap-2 mb-3">
                        <button class="btn btn-primary px-4 shadow-sm" onclick="applyFilters()">
                            <i class="bi bi-funnel me-2"></i>Apply Filters
                        </button>
                        <button class="btn btn-outline-secondary px-4 shadow-sm" onclick="clearFilters()">
                            <i class="bi bi-x-circle me-2"></i>Clear Filters
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-lg">
                <div class="card-header bg-white border-bottom-0">
                    <h5 class="card-title mb-0 text-info">
                        <i class="bi bi-bar-chart me-2"></i>Sport Comparison Results
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Loading -->
                    <div id="loading" class="text-center d-none py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3">Loading comparison data...</p>
                    </div>

                    <!-- Error -->
                    <div id="error" class="alert alert-danger d-none" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <span id="errorText">An error occurred</span>
                    </div>

                    <!-- Data -->
                    <div id="data" class="d-none">
                        <!-- Summary Cards -->
                        <div class="row mb-4 g-3">
                            <div class="col-md-3">
                                <div class="card bg-gradient-info text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-collection-play display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="totalSports">0</h2>
                                        <p class="mb-0">Sports Analyzed</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-gradient-success text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-trophy display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="topSport">-</h2>
                                        <p class="mb-0">Top Performing Sport</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-gradient-primary text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-clipboard-data display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="totalBookings">0</h2>
                                        <p class="mb-0">Total Bookings</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-gradient-warning text-white shadow-sm h-100">
                                    <div class="card-body text-center">
                                        <div class="mb-2">
                                            <i class="bi bi-flag display-5"></i>
                                        </div>
                                        <h2 class="fw-bold mb-1" id="flaggedCount">0</h2>
                                        <p class="mb-0">Flagged Sports</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Results Table -->
                        <div class="table-responsive">
                            <!-- Help Section -->
                            <div class="alert alert-info mb-3">
                                <h6 class="alert-heading mb-2">
                                    <i class="bi bi-info-circle me-2"></i>Flagging Criteria by City
                                </h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <strong>Performance Flags:</strong>
                                        <ul class="mb-0 mt-1">
                                            <li><strong>Top6 Flag:</strong> Sport not in top 6 but has more bookings than a top 6 sport</li>
                                            <li><strong>Top8 Flag:</strong> Sport not in top 8 but has more bookings than a top 8 sport</li>
                                            <li><strong>HighBookings Flag:</strong> Sport ranked 9+ with 60+ bookings (or 5% of most popular sport)</li>
                                        </ul>
                                    </div>
                                    <div class="col-md-6">
                                        <strong>Status Levels:</strong>
                                        <ul class="mb-0 mt-1">
                                            <li><span class="badge bg-success">Normal</span> No flags - performing as expected</li>
                                            <li><span class="badge bg-warning">Flagged</span> One or more flags - requires attention</li>
                                        </ul>
                                    </div>
                                </div>
                                <hr class="my-2">
                                <small class="text-muted">
                                    <i class="bi bi-lightbulb me-1"></i>
                                    <strong>Note:</strong> Analysis is performed per city. Sports are ranked by total bookings within each city. 
                                    Flags help identify sports that are performing better than their ranking suggests.
                                </small>
                            </div>
                            
                            <table class="table table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th>City <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="City where the sport is analyzed."></i></th>
                                        <th>Sport <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Sport name."></i></th>
                                        <th>Total Bookings <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Total bookings for this sport in this city."></i></th>
                                        <th>Ranking <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Sport ranking in the city (1 = most popular)."></i></th>
                                        <th>Flags <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Performance flags based on criteria."></i></th>
                                        <th>Status <i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Overall status based on flags."></i></th>
                                    </tr>
                                </thead>
                                <tbody id="resultsTable">
                                    <!-- Data will be populated here -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Last Updated -->
                        <div class="mt-3 text-muted small">
                            Last updated: <span id="lastUpdated">Never</span>
                        </div>

                        <!-- Historial de Consultas -->
                        <div class="mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="fw-bold mb-0"><i class="bi bi-clock-history me-2"></i>Historial de Consultas</h6>
                                <button class="btn btn-outline-danger btn-sm" onclick="clearHistory()">
                                    <i class="bi bi-trash me-1"></i>Limpiar Historial
                                </button>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-sm table-bordered">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Fecha</th>
                                            <th>Filtros</th>
                                            <th>Top Sport</th>
                                            <th>Flagged Count</th>
                                        </tr>
                                    </thead>
                                    <tbody id="historyTable">
                                        <!-- Historial se llena dinámicamente -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Variables globales
        let currentData = null;
        let filtersReady = false;

        // Inicializar la vista con carga optimizada
        async function initializeView() {
            ConfigHelpers?.log('=== Sport Comparison View Initialization ===');
            
            try {
                // Cargar datos inmediatamente sin filtros
                await loadDataWithoutFilters();
                
                // Inicializar filtros en paralelo
                if (typeof initializeSharedFilters === 'function') {
                    await initializeSharedFilters();
                    filtersReady = true;
                    
                    // Callback cuando los filtros estén listos
                    if (typeof setFiltersReadyCallback === 'function') {
                        setFiltersReadyCallback(() => {
                            ConfigHelpers?.log('Filtros listos, recargando datos...');
                            loadData();
                        });
                    }
                } else {
                    ConfigHelpers?.log('SharedFilters no disponible, usando filtros básicos');
                    filtersReady = true;
                }
                
            } catch (error) {
                ConfigHelpers?.logError('Error inicializando vista:', error);
            }
        }
        
        // Cargar datos sin filtros (carga inicial rápida)
        async function loadDataWithoutFilters() {
            try {
                showLoading();
                hideError();
                
                // Usar las utilidades de API optimizadas
                const data = await API_UTILS.loadStatsData('sportComparison');
                displayData(data, 'Carga inicial sin filtros');
                
            } catch (error) {
                ConfigHelpers?.logError('Error cargando datos iniciales:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadDataWithoutFilters');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }
        
        // Inicializar cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', initializeView);
        
        // También inicializar si el DOM ya está listo (para navegación SPA)
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeView);
        } else {
            initializeView();
        }

        // Cargar datos desde la API usando los filtros globales
        async function loadData() {
            if (!filtersReady) {
                ConfigHelpers?.log('loadData() abortado: filtros no listos');
                return;
            }
            
            try {
                showLoading();
                hideError();
                
                const params = buildApiParameters();
                
                // Usar las utilidades de API optimizadas
                const data = await API_UTILS.loadStatsData('sportComparison', params);
                displayData(data, 'Datos con filtros aplicados');
                
            } catch (error) {
                ConfigHelpers?.logError('Error cargando datos:', error);
                const userMessage = API_UTILS.handleApiError(error, 'loadData');
                showError(userMessage);
            } finally {
                hideLoading();
            }
        }

        // Construir parámetros de API usando filtros globales
        function buildApiParameters() {
            const params = {};
            if (typeof getSelectedFilterValues === 'function') {
                const sports = getSelectedFilterValues('sports');
                const cities = getSelectedFilterValues('cities');
                const rinkSizes = getSelectedFilterValues('rinkSizes');
                const facilities = getSelectedFilterValues('facilities');
                if (sports && sports.length > 0) params.sports = sports;
                if (cities && cities.length > 0) params.cities = cities;
                if (rinkSizes && rinkSizes.length > 0) params.rinkSizes = rinkSizes;
                if (facilities && facilities.length > 0) params.facilities = facilities;
            }
            // Nuevos filtros
            const month = document.getElementById('monthFilter').value;
            if (month) params.month = parseInt(month);
            const year = document.getElementById('yearFilter').value;
            if (year) params.year = parseInt(year);
            const createdDateFrom = document.getElementById('createdDateFrom').value;
            if (createdDateFrom) params.createdDateFrom = createdDateFrom;
            const createdDateTo = document.getElementById('createdDateTo').value;
            if (createdDateTo) params.createdDateTo = createdDateTo;
            const happeningDateFrom = document.getElementById('happeningDateFrom').value;
            if (happeningDateFrom) params.happeningDateFrom = happeningDateFrom;
            const happeningDateTo = document.getElementById('happeningDateTo').value;
            if (happeningDateTo) params.happeningDateTo = happeningDateTo;
            return params;
        }

        // Botón para aplicar filtros (solo recarga datos)
        function applyFilters() {
            ConfigHelpers?.log('Aplicando filtros...');
            loadData();
        }

        // Botón para limpiar filtros globales y recargar datos
        function clearFilters() {
            ConfigHelpers?.log('Limpiando filtros...');
            // Limpiar filtros globales si existen
            if (typeof clearAllFilters === 'function') {
                clearAllFilters();
            }
            // Limpiar mes y año
            const month = document.getElementById('monthFilter');
            if (month) month.value = '';
            const year = document.getElementById('yearFilter');
            if (year) year.value = '';
            // Limpiar datepickers
            const dateIds = ['createdDateFrom', 'createdDateTo', 'happeningDateFrom', 'happeningDateTo'];
            dateIds.forEach(id => {
                const el = document.getElementById(id);
                if (el) el.value = '';
            });
            loadData();
        }

        // Mostrar datos en la UI
        function displayData(data, source = '') {
            // Compatibilidad: aceptar tanto 'results' como 'Results'
            const results = data.Results || data.results;
            const totalUniqueBookings = data.TotalUniqueBookings || data.totalUniqueBookings;
            if (!data || !Array.isArray(results) || results.length === 0) {
                showError('No data available for sport comparison');
                return;
            }
            currentData = results;
            updateSummaryCards({ Results: results, TotalUniqueBookings: totalUniqueBookings });
            updateDataTable(results);
            document.getElementById('data').classList.remove('d-none');
            document.getElementById('lastUpdated').textContent = new Date().toLocaleString();

            // Guardar en historial
            const sports = [...new Set(results.map(item => item.sport))];
            const flaggedCount = results.filter(item => item.isFlaggedTop6 || item.isFlaggedTop8 || item.isFlaggedHighBookings).length;
            const topSport = results.reduce((top, current) =>
                (current.totalBookings || 0) > (top.totalBookings || 0) ? current : top, { sport: 'N/A', totalBookings: 0 }
            );
            const filtersSummary = (typeof getFiltersSummary === 'function') ? getFiltersSummary() : 'All Data';
            saveHistoryEntry({
                date: new Date().toLocaleString(),
                filters: filtersSummary,
                topSport: topSport.sport || 'N/A',
                flaggedCount: flaggedCount
            });
            renderHistory();
        }

        // Update summary cards
        function updateSummaryCards(data) {
            const results = data.Results || data.results;
            const totalUniqueBookings = data.TotalUniqueBookings || data.totalUniqueBookings;
            const sports = [...new Set(results.map(item => item.sport))];
            const flaggedCount = results.filter(item => item.isFlaggedTop6 || item.isFlaggedTop8 || item.isFlaggedHighBookings).length;
            const topSport = results.reduce((top, current) =>
                (current.totalBookings || 0) > (top.totalBookings || 0) ? current : top, { sport: 'N/A', totalBookings: 0 }
            );
            document.getElementById('totalSports').textContent = sports.length;
            document.getElementById('topSport').textContent = topSport.sport || 'N/A';
            document.getElementById('totalBookings').textContent = formatNumber(totalUniqueBookings || 0);
            document.getElementById('flaggedCount').textContent = flaggedCount;
        }

        // Update data table
        function updateDataTable(data) {
            const tbody = document.getElementById('resultsTable');
            tbody.innerHTML = '';
            
            data.forEach(item => {
                const row = document.createElement('tr');
                const flags = getFlagsBadges(item);
                const status = getStatusBadge(item);
                
                row.innerHTML = `
                    <td><strong>${item.city || 'N/A'}</strong></td>
                    <td><strong>${item.sport || 'N/A'}</strong></td>
                    <td>${formatNumber(item.totalBookings || 0)}</td>
                    <td><span class="badge bg-secondary">#${item.ranking || 'N/A'}</span></td>
                    <td>${flags}</td>
                    <td>${status}</td>
                `;
                tbody.appendChild(row);
            });
        }

        // Helper functions
        function getFlagsBadges(item) {
            const flags = [];
            if (item.isFlaggedTop6) flags.push('<span class="badge bg-warning me-1">Top6</span>');
            if (item.isFlaggedTop8) flags.push('<span class="badge bg-info me-1">Top8</span>');
            if (item.isFlaggedHighBookings) flags.push('<span class="badge bg-danger me-1">HighBookings</span>');
            return flags.length > 0 ? flags.join('') : '<span class="text-muted">None</span>';
        }

        function getStatusBadge(item) {
            const hasFlags = item.isFlaggedTop6 || item.isFlaggedTop8 || item.isFlaggedHighBookings;
            if (hasFlags) {
                return '<span class="badge bg-warning">Flagged</span>';
            } else {
                return '<span class="badge bg-success">Normal</span>';
            }
        }

        function formatNumber(num) {
            return new Intl.NumberFormat().format(num);
        }

        function showLoading() {
            document.getElementById('loading').classList.remove('d-none');
            document.getElementById('data').classList.add('d-none');
            document.getElementById('error').classList.add('d-none');
        }
        
        function hideLoading() {
            document.getElementById('loading').classList.add('d-none');
        }
        
        function showError(message) {
            document.getElementById('errorText').textContent = message;
            document.getElementById('error').classList.remove('d-none');
            document.getElementById('data').classList.add('d-none');
        }
        
        function hideError() {
            document.getElementById('error').classList.add('d-none');
        }

        // Export function
        function exportData() {
            if (!currentData || currentData.length === 0) {
                alert('No data to export');
                return;
            }
            
            const csvContent = generateCSV(currentData);
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `sport-comparison-${new Date().toISOString().split('T')[0]}.csv`;
            a.click();
            window.URL.revokeObjectURL(url);
        }

        function generateCSV(data) {
            const headers = ['City', 'Sport', 'Total Bookings', 'Ranking', 'Top6 Flag', 'Top8 Flag', 'High Bookings Flag'];
            const rows = data.map(item => [
                item.city || 'N/A',
                item.sport || 'N/A',
                item.totalBookings || 0,
                item.ranking || 'N/A',
                item.isFlaggedTop6 ? 'Yes' : 'No',
                item.isFlaggedTop8 ? 'Yes' : 'No',
                item.isFlaggedHighBookings ? 'Yes' : 'No'
            ]);
            
            return [headers, ...rows].map(row => row.join(',')).join('\n');
        }

        // Guardar historial en localStorage
        function saveHistoryEntry(entry) {
            let history = JSON.parse(localStorage.getItem('sportComparisonHistory') || '[]');
            history.unshift(entry); // Agrega al inicio
            if (history.length > 20) history = history.slice(0, 20); // Max 20 entries
            localStorage.setItem('sportComparisonHistory', JSON.stringify(history));
        }

        // Mostrar historial en la tabla
        function renderHistory() {
            const tbody = document.getElementById('historyTable');
            if (!tbody) return;
            let history = JSON.parse(localStorage.getItem('sportComparisonHistory') || '[]');
            tbody.innerHTML = '';
            if (history.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">No hay historial</td></tr>';
                return;
            }
            history.forEach(item => {
                const tr = document.createElement('tr');
                const flaggedBadge = item.flaggedCount > 0 ? 
                    `<span class="badge bg-warning">${item.flaggedCount}</span>` : 
                    `<span class="badge bg-success">0</span>`;
                tr.innerHTML = `
                    <td><small>${item.date}</small></td>
                    <td><small>${item.filters}</small></td>
                    <td><strong>${item.topSport}</strong></td>
                    <td>${flaggedBadge}</td>
                `;
                tbody.appendChild(tr);
            });
        }

        // Renderizar historial al cargar
        document.addEventListener('DOMContentLoaded', renderHistory);

        // Inicializar tooltips de Bootstrap
        document.addEventListener('DOMContentLoaded', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        // Clear history function
        function clearHistory() {
            if (confirm('¿Estás seguro de que quieres limpiar todo el historial de consultas?')) {
                ConfigHelpers?.log('Limpiando historial...');
                localStorage.removeItem('sportComparisonHistory');
                renderHistory();
            }
        }

        // Inicializar el filtro de año con los últimos 10 años
        document.addEventListener('DOMContentLoaded', function () {
            const yearSelect = document.getElementById('yearFilter');
            if (yearSelect) {
                const currentYear = new Date().getFullYear();
                for (let y = currentYear; y >= currentYear - 10; y--) {
                    const opt = document.createElement('option');
                    opt.value = y;
                    opt.textContent = y;
                    yearSelect.appendChild(opt);
                }
            }
        });
    </script>
} 